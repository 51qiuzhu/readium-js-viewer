
# NPM package file, see https://docs.npmjs.com/files/package.json
# Oh, this is CSON, not JSON ( see CoffeeScript-Object-Notation https://github.com/bevry/cson )

#####################################################################
#####################################################################

# Master source file used to generate package.json

# DEFAULT METHOD (if package.json is intact):
# npm run cson2json
#
# ALTERNATIVE METHOD (if package.json is corrupted):
# npm install cson
# node ./node_modules/cson/bin/cson2json package.cson > package.json
# Note that on some Windows terminals (e.g. GitShell),
# unfortunately the package.json file might need its encoding
# converted to UTF-no-BOM :(
# This is somehow due to the piped stdout-stdin result being UCS2-little-endian
# (yet this works just fine when the same command is invoked from
# "npm run cson2json" instead of from Node!)

#####################################################################
#####################################################################

'/*': '----------------------------------------------------------------------------'
'..': 'This package.json (JSON) is automatically generated from package.cson (CSON)'
'.-': "DO NOT invoke 'npm init' or 'npm install --save' ('--save-dev' / '--save-optional')"
'._': 'as this would overwrite / update the JSON, not the master CSON!'
'*/': '----------------------------------------------------------------------------'

#####################################################################

name: "readium-js-viewer-viewer"

version: "0.19.0-alpha"

description: "Readium web app - online cloud reader, offline Chrome extension/app, etc."

keywords: [
    "readium"
    "epub"
    "epub3"
]

author:
    name: "Readium (Daniel Weck)"
    email: "daniel.weck@gmail.com"
    url: "http://github.com/readium"

licenses: [
    type: "BSD-3-Clause"
    url: "http://opensource.org/licenses/BSD-3-Clause"
]

homepage: "http://github.com/readium/readium-js-viewer"

bugs:
    url: "http://github.com/readium/readium-js-viewer/issues"
    email: "daniel.weck@gmail.com"

repository:
    type: "git"
    url: "git://github.com/readium/readium-js-viewer.git"

#####################################################################
files: [
    
    "build-output/"
    
    "build-output-usage-example/"
    
    "license.txt"
    
    "README.md"
]

# "main" is designed for Node/CommonJS modules, not RequireJS/AMD ones.
# See http://requirejs.org/docs/commonjs.html
# See http://requirejs.org/docs/node.html
#
#main: "build-output/_multiple-bundles/readium-js-viewer.js"

#####################################################################
dependencies:

    parallelshell: 'latest'
    
    'http-server': 'latest'
#    'httpserver': 'latest'
#    'node-http-server': 'latest'
    
    opener: 'latest'

# See remark below about *runtime* dependencies

#####################################################################
devDependencies:

#    "crypto-js": "latest"
    
#    "zipjs": "gildas-lormeau/zip.js"
#    "zipjs": "ryanackley/zip.js"
#    "zipjs": "danielweck/zip.js"

#    requirejs: "latest"

#    almond: "latest"
    
#    "requirejs-text": "latest"

    bootstrap: "latest"
    
    'bootstrap-accessibility-plugin': "latest"
    
    hammerjs: "latest"
    
    'jquery-hammerjs': "latest"
    
    #keymaster: "latest"
    keymaster: "danielweck/keymaster"
    
    screenfull: "latest"

    JSON2: "latest"
    
    hogan: "latest"
    
    'requirejs-hogan-plugin': "latest"
    
    remotestoragejs: "latest"
    
    #jath: "latest"
    jath: "danielweck/jath"
    # libxmljs node-gyp python < v3 :(
    #'jquery-xpath': "latest"
    
    'spin.js': "latest"

# Above items are in fact runtime dependencies,
# but because they are already bundled in the "build-output" folder that ships with the NPM package,
# we declare them in "devDependencies" to avoid unnecessary downloads.
# The download can be forced by using the "--dev" option after "npm install readium-js-viewer".
    
    "gift": "latest"
    
    cson: "latest"

    jshint: "latest"

    glob: 'latest'

    rimraf: 'latest'

    mkdirp: 'latest'

    watch: 'latest'
    
    'live-reload': 'latest'

    "grunt": 'latest'
    "grunt-concurrent": 'latest'
    "grunt-contrib-clean": 'latest'
    "grunt-contrib-copy": 'latest'
    "grunt-contrib-cssmin": 'latest'
    "grunt-contrib-nodeunit": 'latest'
    "grunt-contrib-requirejs": 'latest'
    "grunt-contrib-watch": 'latest'
    "grunt-crx": 'latest'
    "grunt-env": 'latest'
    "grunt-express": 'latest'
    "grunt-run-grunt": 'latest'
    "grunt-selenium-webdriver": 'latest'
    "grunt-simple-mocha": 'latest'
    "load-grunt-config": 'latest'

    "chai": 'latest'
    "chai-as-promised": 'latest'
    "github": 'latest'
    "hogan.js": 'latest'
    "httpreq": 'latest'
    "unzip": 'latest'
    "wd": 'latest'
    "xml2js": 'latest'

#####################################################################
scripts:

#=====================
    env: '
    
        env
    '
    
#=====================
    echo: '
    
        echo ""
    '

#=====================
    cson2json: '
    
        node node_modules/cson/bin/cson2json package.cson
        &&
        node node_modules/cson/bin/cson2json package.cson > package.json
    '

#=====================
    'prepare': '
        
        npm run
            prepare:submodule
        &&
        npm run
            prepare:dependencies
    '

#=====================
    'prepare:dependencies': '
        
        npm install
        &&
        npm update
    '

#=====================
    'prepare:submodule': '
        
        cd readium-js
        &&
        npm run prepare
        &&
        cd ..
        &&
        ls
    '
    
#=====================
    clean: '
        node --version
        &&
        npm --version
        &&
        rimraf
            build-output/*
    '

#=====================
    'prebuild': '
    
        npm run clean
        &&
        mkdirp build-output/_multiple-bundles
        &&
        mkdirp build-output/_single-bundle
        &&
        mkdirp build-output/_SOURCES
    '
    
#=====================
    build: '
    
        npm run
            build:styles
        &&
        npm run
            build:scripts
    '
    
#=====================
    lint: '
    
        node
            build-tools/jshint_glob.js
            js/**.js
    '

#=====================
#    'prebuild:scripts': '
#    
#        npm run
#            lint
#    '

#=====================
    'versioning': '
        node build-config/versioning.js build-output/_SOURCES/version.json
    '
    
#=====================
    'postbuild:scripts': '
    
        rimraf build-output/_SOURCES
    '

#=====================
    'postbuild:scripts:multiple': '
    
        rimraf build-output/_multiple-bundles/version.json
        &&
        rimraf build-output/_multiple-bundles/templates
        &&
        rimraf build-output/_multiple-bundles/i18n
        &&
        rimraf build-output/_multiple-bundles/migration
        &&
        rimraf build-output/_multiple-bundles/storage
        &&
        rimraf build-output/_multiple-bundles/versioning
        &&
        rimraf build-output/_multiple-bundles/workers
        &&
        rimraf build-output/_multiple-bundles/mathjax
    '
    
#=====================
    'build:scripts': '
        
        npm run versioning
        &&
        cp -r src/templates build-output/_SOURCES
        &&
        cp -r src/i18n build-output/_SOURCES
        &&
        npm run
            build:scripts:multiple
        &&
        npm run
            build:scripts:single
        &&
        npm run
            build:scripts:single:LITE
        &&
        cp readium-js/node_modules/zip-js/WebContent/z-worker.js build-output
        &&
        cp readium-js/node_modules/zip-js/WebContent/deflate.js build-output
        &&
        cp readium-js/node_modules/zip-js/WebContent/inflate.js build-output
        &&
        cp -r src/js/mathjax build-output
    '

#=====================
    'build:scripts:multiple': '
        node readium-js/readium-shared-js/readium-cfi-js/node_modules/requirejs/bin/r.js
             -o
             readium-js/readium-shared-js/readium-cfi-js/build-config/RequireJS_config.js
             --rjs_bundle=multiple
    '
    
#=====================
    'build:scripts:single': '
        node readium-js/readium-shared-js/readium-cfi-js/node_modules/requirejs/bin/r.js
             -o
             readium-js/readium-shared-js/readium-cfi-js/build-config/RequireJS_config.js
             --rjs_bundle=single
    '

#=====================
    'build:scripts:single:LITE': '
        node readium-js/readium-shared-js/readium-cfi-js/node_modules/requirejs/bin/r.js
             -o
             readium-js/readium-shared-js/readium-cfi-js/build-config/RequireJS_config.js
             --rjs_bundle=single
             --rjs_configCustomTarget=_LITE
    '

#=====================
#    'prebuild:styles': '
#        mkdirp build-output/css/
#    '

#=====================
# TODO use cssminify
    'build:styles': '
    
        cp -r src/css build-output
        &&
        cp -r src/images build-output
    '
#        cp -r node_modules/bootstrap/fonts build-output

#=====================
#### BLOCKING! (CTRL-C) [watch][live-reload][http]
    'example:dev': '
        npm run
            clean
        &&
        echo > open_webbrowser.js
        &&
        parallelshell
            \"npm run live-reload\"
            \"npm run watch\"
            \"npm run http\"
    '

#=====================
#### BLOCKING! (CTRL-C) [http]
    'example': '
        cp -r epub_content build-output
        &&
        cp -r build-output-usage-example/* build-output
        &&
        parallelshell
            \"npm run http\"
            \"npm run webbrowser\"
    '

#=====================
#### BLOCKING! (CTRL-C) [watch:build]
    watch: '
    
        parallelshell
            \"npm run watch:build\"
    '
    #   \"npm run watch:test\

#=====================
#   'watch:test': 'karma start'

#=====================
#   test: 'karma start --singleRun'

#=====================
#### BLOCKING! (CTRL-C) [watch or nodemon]
    'watch:build': '
        watch
            \"npm run build
                && node build-tools/webbrowser.js
                && npm run webbrowser
                && rimraf open_webbrowser.js\"
            build-output-usage-example/
    '
    #    nodemon -q
    #    -w build-output-usage-example/
    #    --ext \".\"
    #    --exec \"npm run build
    #            && node build-tools/webbrowser.js 
    #            && npm run webbrowser
    #            && rimraf open_webbrowser.js\"
    
#=====================
    'http': '
        http-server -p 9090 ./
    '
#    node node_modules/httpserver/httpserver.js 9090 127.0.0.1
#    http-server -p 9090 ./
#    node  .\node_modules\node-http-server\server\http.js root=. port=9090 launch=now verbose=true
#    node build-tools/http-server.js

#=====================
    'live-reload': '
    
        live-reload --port 9091 --delay 1000 build-output/
    '

#=====================
    'webbrowser': '
    
        opener http://127.0.0.1:9090/build-output-usage-example/
    '
