{
  "version": 3,
  "file": "build-output/_single-bundle/readium-js-viewer_CHROMEAPP-WORKER.js",
  "sources": [
    "readium-js/readium-shared-js/readium-cfi-js/node_modules/almond/almond.js",
    "src/chrome-app/requirejs-config.js",
    "src/js/workers/Messages.js",
    "src/chrome-app/storage/FileSystemStorage.js",
    "readium-js/node_modules/zip-js/WebContent/zip.js",
    "readium-js/node_modules/zip-js/WebContent/inflate.js",
    "src/js/storage/ZipFileLoader.js",
    "src/js/storage/UnpackedDirLoader.js",
    "src/js/ModuleConfig.js",
    "readium-js/node_modules/crypto-js/core.js",
    "readium-js/node_modules/crypto-js/sha1.js",
    "readium-js/js/epub-fetch/encryption_handler.js",
    "src/js/workers/ContentTransformer.js",
    "src/js/workers/EpubLibraryWriter.js"
  ],
  "names": [],
  "mappingsjbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA,ADkCA;ACjv8BA,ADw8BA;ACvnnnGA,ADoGA;ACnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA,AD8BA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA,ADyBA;ACxxurJA,ADsJA;ACr
  "sourcesContent": [
    "/**\n * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                //Lop off the last part of baseParts, so that . matches the\n                //\"directory\" and not name of the baseName's module. For instance,\n                //baseName of \"one/two/three\", maps to \"one/two/three.js\", but we\n                //want the directory, \"one/two\" for this normalization.\n                name = baseParts.slice(0, baseParts.length - 1).concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"readium-js-viewer_CHROMEAPP-WORKER\", function(){});\n\n",
    "//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.\r\n//\r\n//  Redistribution and use in source and binary forms, with or without modification,\r\n//  are permitted provided that the following conditions are met:\r\n//  1. Redistributions of source code must retain the above copyright notice, this\r\n//  list of conditions and the following disclaimer.\r\n//  2. Redistributions in binary form must reproduce the above copyright notice,\r\n//  this list of conditions and the following disclaimer in the documentation and/or\r\n//  other materials provided with the distribution.\r\n//  3. Neither the name of the organization nor the names of its contributors may be\r\n//  used to endorse or promote products derived from this software without specific\r\n//  prior written permission.\r\n\r\n\r\nvar currentURL =\r\nself.location ? (\r\n  self.location.protocol\r\n  + \"//\"\r\n  + self.location.hostname\r\n  + (self.location.port ? (':' + self.location.port) : '')\r\n  + (self.location.pathname ? self.location.pathname : '')\r\n  ) : ''\r\n;\r\n\r\nconsole.log(currentURL);\r\n\r\n// self.location.origin  == self.location.protocol + '//' + self.location.host\r\n\r\nconsole.log(self.location.origin);\r\n\r\n\r\n// MUST BE *SINGLE* CALL TO require.config() FOR ALMOND (SINGLE BUNDLE) TO WORK CORRECTLY!!!\r\nrequire.config({\r\n    /* http://requirejs.org/docs/api.html#config-waitSeconds */\r\n    waitSeconds: 0,\r\n\r\n    config : {\r\n\r\n        'readium_js_viewer/ModuleConfig' : {\r\n\r\n            'mathJaxUrl': self.location.origin + '/scripts/mathjax/MathJax.js',\r\n\r\n            'annotationCSSUrl': self.location.origin + '/css/annotations.css',\r\n\r\n            'jsLibRoot': '/scripts/zip/',\r\n\r\n            'useSimpleLoader' : true,\r\n\r\n            'epubLibraryPath': undefined, // defaults to /epub_content/epub_library.json inside Chrome's filesystem storage\r\n\r\n            'imagePathPrefix': undefined,\r\n\r\n            'canHandleUrl' : false,\r\n            'canHandleDirectory' : true,\r\n\r\n            'workerUrl': '/scripts/readium-js-viewer_CHROMEAPP-WORKER.js',\r\n            'epubReadingSystemUrl': self.location.origin + '/scripts/epubReadingSystem.js',\r\n        }\r\n    }\r\n});\r\n\ndefine(\"readium_js_viewer_RJS-CONFIG\", function(){});\n\n",
    "define('readium_js_viewer/workers/Messages',[],function(){\r\n\treturn {\r\n\t\t// window -> worker messages\r\n\t\tIMPORT_ZIP : 0,\r\n\t\tOVERWRITE_CONTINUE : 1,\r\n\t\tFIND_PACKAGE_RESPONSE: 2,\r\n\t\tPARSE_PACKAGE_RESPONSE: 3,\r\n\t\tDELETE_EPUB : 4,\r\n\t\tIMPORT_DIR : 5,\r\n\t\tIMPORT_URL: 6,\r\n\t\tMIGRATE: 7,\r\n\t\tOVERWRITE_SIDE_BY_SIDE: 8,\r\n\t\tCONTINUE_IMPORT_ZIP: 9,\r\n\r\n\t\t// worker -> window messages\r\n\t\tSUCCESS : 100,\r\n\t\tPROGRESS : 101,\r\n\t\tERROR : 102,\r\n\t\tOVERWRITE : 103,\r\n\t\tFIND_PACKAGE : 104,\r\n\t\tPARSE_PACKAGE: 105,\r\n\r\n\r\n\t\tPROGRESS_EXTRACTING : 200,\r\n\t\tPROGRESS_WRITING: 201,\r\n\t\tPROGRESS_DELETING: 202,\r\n\t\tPROGRESS_MIGRATING: 203,\r\n\r\n\t\tERROR_STORAGE : 300,\r\n\t\tERROR_EPUB : 301,\r\n\t\tERROR_AJAX : 302,\r\n\r\n\t}\r\n});\n",
    "//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.\r\n//\r\n//  Redistribution and use in source and binary forms, with or without modification,\r\n//  are permitted provided that the following conditions are met:\r\n//  1. Redistributions of source code must retain the above copyright notice, this\r\n//  list of conditions and the following disclaimer.\r\n//  2. Redistributions in binary form must reproduce the above copyright notice,\r\n//  this list of conditions and the following disclaimer in the documentation and/or\r\n//  other materials provided with the distribution.\r\n//  3. Neither the name of the organization nor the names of its contributors may be\r\n//  used to endorse or promote products derived from this software without specific\r\n//  prior written permission.\r\n\r\ndefine('StorageManager',['readium_js_viewer/workers/Messages'], function(Messages){\r\n\r\n\r\n\tvar FileUtils = (function(){\r\n\r\n\t\tvar toArray = function(list) {\r\n\t\t\treturn Array.prototype.slice.call(list || [], 0);\r\n\t\t}\r\n\r\n\t\tvar makeFile = function(root, filename, contents, callback, error){\r\n\t\t\troot.getFile(filename, {create:true}, function(fileEntry){\r\n\t\t\t\tfileEntry.createWriter(function(writer){\r\n\t\t\t\t\twriter.onwriteend = function(){\r\n\t\t\t\t\t\t// strange piece of the FileWriter api. Writing to an\r\n\t\t\t\t\t\t// existing file just overwrites content in place. Still need to truncate\r\n\t\t\t\t\t\t// which triggers onwritend event...again. o_O\r\n\t\t\t\t\t\tif (!writer.error && writer.position < writer.length){\r\n\t\t\t\t\t\t\twriter.truncate(writer.position);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (callback) {\r\n\t\t\t\t\t\t\tcallback(fileEntry);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\twriter.onerror = function(e){\r\n\t\t\t\t\t\tconsole.error('failed: ' + filename);\r\n\t\t\t\t\t\terror(writer.error);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (contents instanceof ArrayBuffer){\r\n\t\t\t\t\t\tcontents = new Uint8Array(contents);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar blob = contents instanceof Blob ? contents : new Blob([contents]);\r\n\t\t\t\t\twriter.write(blob);\r\n\t\t\t\t}, error);\r\n\t\t\t}, error);\r\n\t\t}\r\n\r\n\t\tvar makeDir = function(root, dirname, callback, error){\r\n\t\t\troot.getDirectory(dirname, {create:true},callback, error);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tmkdirs : function(root, dirname, callback, error){\r\n\t\t\t\tvar pathParts;\r\n\t\t\t\tif (dirname instanceof Array){\r\n\t\t\t\t\tpathParts = dirname;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tpathParts = dirname.split('/');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar makeDirCallback = function(dir){\r\n\t\t\t\t\tif (pathParts.length){\r\n\t\t\t\t\t\tmakeDir(dir, pathParts.shift(), makeDirCallback, error);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tif (callback)\r\n\t\t\t\t\t\t\tcallback(dir);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tmakeDirCallback(root);\r\n\t\t\t},\r\n\t\t\trmDir : function (root, dirname, callback, error){\r\n\t\t\t\troot.getDirectory(dirname, {create:true}, function(dirEntry){\r\n\t\t\t\t\tdirEntry.removeRecursively(callback, error);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\trmFile : function(root, filename, callback, error){\r\n\t\t\t\troot.getFile(filename, {create:true}, function(fileEntry){\r\n\t\t\t\t\tfileEntry.remove(callback, error);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tmkfile : function(root, filename, contents, callback, error){\r\n\t\t\t\tif (filename.charAt(0) == '/'){\r\n\t\t\t\t\tfilename = filename.substring(1);\r\n\t\t\t\t}\r\n\t\t\t\tvar pathParts = filename.split('/');\r\n\t\t\t\tif (pathParts.length > 1){\r\n\t\t\t\t\tFileUtils.mkdirs(root, pathParts.slice(0, pathParts.length - 1), function(dir){\r\n\t\t\t\t\t\tmakeFile(dir, pathParts[pathParts.length - 1], contents, callback, error);\r\n\t\t\t\t\t}, error);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tmakeFile(root, filename, contents, callback, error);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tls: function(dir, callback, error){\r\n\t\t\t\tvar reader = dir.createReader();\r\n\t\t\t\tvar entries = [];\r\n\r\n\t\t\t\tvar readEntries = function() {\r\n\t\t\t\t\treader.readEntries (function(results) {\r\n\t\t\t\t\t\tif (!results.length) {\r\n\t\t\t\t\t\t\tcallback(entries);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tentries = entries.concat(toArray(results));\r\n\t\t\t\t\t\t\treadEntries();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, error);\r\n\t\t\t\t}\r\n\t\t\t\treadEntries();\r\n\r\n\t\t\t},\r\n\t\t\treadBlob: function(blob, dataType, callback){\r\n\t\t\t\tvar reader = new FileReader();\r\n\t\t\t\treader.onloadend = function(e){\r\n\t\t\t\t\tcallback(reader.result);\r\n\t\t\t\t}\r\n\t\t\t\treader[\"readAs\" + dataType](blob);\r\n\t\t\t},\r\n\t\t\treadFileEntry : function(fileEntry, dataType, callback){\r\n\t\t\t\tfileEntry.file(function(file){\r\n\t\t\t\t\tFileUtils.readBlob(file, dataType, callback);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\treadFile : function(root, file, dataType, callback, error) {\r\n\r\n\t\t\t\troot.getFile(file, {create:false}, function(fileEntry){\r\n\t\t\t\t\tFileUtils.readFileEntry(fileEntry, dataType, callback, error);\r\n\t\t\t\t}, error);\r\n\t\t\t}\r\n\r\n\t\t};\r\n\t}\r\n\t)();\r\n\tvar rootDir;\r\n\r\n\tvar wrapErrorHandler = function(op, path, handler){\r\n\t\treturn function(err){\r\n\t\t\tvar data = {original: err, path: path, error: err.name, op: op};\r\n\t\t\thandler(Messages.ERROR_STORAGE, data);\r\n\t\t\tconsole.error(data);\r\n\t\t}\r\n\t};\r\n\tvar copyDir = function(from, to, success, error){\r\n\t\tFileUtils.ls(from, function(entries){\r\n\t\t\tvar counter = 0;\r\n\t\t\tvar checkFinished = function(){\r\n\t\t\t\tif (++counter == entries.length){\r\n\t\t\t\t\tsuccess();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tentries.forEach(function(entry){\r\n\t\t\t\tif (entry.isFile){\r\n\t\t\t\t\tentry.file(function(file){\r\n\t\t\t\t\t\tFileUtils.mkfile(to, entry.name, file, checkFinished);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tFileUtils.mkdirs(to, entry.name, function(dir){\r\n\t\t\t\t\t\tcopyDir(entry, dir, checkFinished);\r\n\t\t\t\t\t}, error);\r\n\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}, error);\r\n\t}\r\n\tvar migrateBook = function(tempRoot, ebookData, success, error){\r\n\t\tvar rootDirName = ebookData.key;\r\n        tempRoot.getDirectory(rootDirName, {create: false}, function(oldBookRoot){\r\n\r\n        \tvar nextStep = function(){\r\n        \t\trootDir.getDirectory(rootDirName, {create: true}, function(newBookRoot){\r\n        \t\t\tcopyDir(oldBookRoot, newBookRoot, success, error);\r\n\r\n        \t\t}, error);\r\n        \t}\r\n\r\n        \trootDir.getDirectory(rootDirName, {create: false}, function(newBookRoot){\r\n        \t\tnewBookRoot.removeRecursively(nextStep, error);\r\n        \t}, nextStep);\r\n        }, error);\r\n\t}\r\n\r\n\tvar migrateBookFiles = function(existingBooks, db, results, success, error, progress){\r\n\t\tvar extensionId = self.location.hostname;\r\n\t\trequestFileSystem(self.TEMPORARY, 5*1024*1024*1024, function(fs){\r\n    \t\tvar tempRoot = fs.root;\r\n    \t\tvar ebooks = [];\r\n    \t\tfor (var i = 0; i < results.rows.length; i++){\r\n\t\t        var ebookData = JSON.parse(results.rows.item(i).value);\r\n\r\n\t\t        // not all records contain books\r\n\t\t        if (ebookData.id){\r\n\t\t            ebooks.push(ebookData);\r\n\t\t        }\r\n\t\t    }\r\n\t\t    var count = 0;\r\n\t\t    var checkFinished = function(ebook){\r\n\t\t    \tif (++count == ebooks.length){\r\n\t\t    \t\tsuccess();\r\n\t\t    \t}\r\n\t\t    \telse{\r\n\t\t    \t\tprogress(Math.round(count/ebooks.length * 100), ebook.title);\r\n\t\t    \t}\r\n\t\t    }\r\n\t\t    ebooks.forEach(function(ebook){\r\n\t\t    \tmigrateBook(tempRoot, ebook, function(){\r\n\t\t    \t\tvar oldRootUrl = \"filesystem:chrome-extension://\" + extensionId + '/temporary/',\r\n\t\t    \t\t\tcoverPath = ebook.cover_href ? ebook.cover_href.substring(oldRootUrl.length) : null;\r\n\r\n\t\t    \t\tvar newObj = {\r\n\t\t    \t\t\tid: ebook.id,\r\n\t\t    \t\t\trootDir: ebook.key,\r\n\t\t    \t\t\trootUrl : StaticStorageManager.getPathUrl(ebook.key),\r\n\t\t    \t\t\tpackagePath: ebook.package_doc_path.substring(ebook.key.length + 1),\r\n\t\t    \t\t\ttitle: ebook.title,\r\n\t\t    \t\t\tauthor: ebook.author,\r\n\t\t    \t\t\tcoverHref: (coverPath ? StaticStorageManager.getPathUrl(coverPath) : null)\r\n\t\t    \t\t}\r\n\r\n\t\t    \t\texistingBooks.push(newObj);\r\n\t\t    \t\tvar blob = new Blob([JSON.stringify(existingBooks)]);\r\n            \t\tStaticStorageManager.saveFile('/epub_library.json', blob, function(){\r\n            \t\t\tdb.transaction(function(t){\r\n            \t\t\t\tt.executeSql('delete from records where id=? or id=?', [ebook.key, ebook.key + '_epubViewProperties'], checkFinished.bind(null, ebook), error);\r\n            \t\t\t});\r\n            \t\t}, error);\r\n\t\t    \t});\r\n\t\t    });\r\n    \t}, error);\r\n\t}\r\n\r\n\tvar migrateBooks = function(success, error, progress){\r\n\t\tvar db = openDatabase('records', '1.0.0', 'records', 65536);\r\n\r\n        if (db){\r\n            db.transaction(function(t){ t.executeSql(\"select id, value from records\", [],\r\n                function(xxx, results){\r\n                    if (results.rows.length) {\r\n\r\n                    \tvar nextStep = function(data){\r\n                    \t\tvar library = [];\r\n                    \t\tif (typeof data == 'string' || data instanceof String){\r\n                    \t\t\tlibrary = JSON.parse(data);\r\n                    \t\t}\r\n                    \t\tmigrateBookFiles(library, db, results, success, error, progress);\r\n                    \t}\r\n\r\n                    \tFileUtils.readFile(rootDir, '/epub_library.json', 'Text', nextStep, nextStep)\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tsuccess();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, error);\r\n            });\r\n        }\r\n\t}\r\n\r\n\tself.requestFileSystem  = self.requestFileSystem || self.webkitRequestFileSystem;\r\n\r\n\tvar StaticStorageManager = {\r\n\r\n\r\n\t\tsaveFile : function(path, blob, success, error){\r\n\t\t\tFileUtils.mkfile(rootDir, path, blob, success, wrapErrorHandler('save', path, error));\r\n\t\t},\r\n\r\n\t\tdeleteFile : function(path, success, error){\r\n\t\t\tvar errorHandler = wrapErrorHandler('delete', path, error);\r\n\t\t\tif (path == '/'){\r\n\t\t\t\tFileUtils.ls(rootDir, function(entries){\r\n\t\t\t\t\tvar count = entries.length;\r\n\t\t\t\t\tvar checkDone = function(){\r\n\t\t\t\t\t\tif (--count == 0){\r\n\t\t\t\t\t\t\tsuccess();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tentries.forEach(function(entry){\r\n\t\t\t\t\t\tif (entry.isDirectory){\r\n\t\t\t\t\t\t\tentry.removeRecursively(checkDone, errorHandler)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tentry.remove(checkDone, errorHandler);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}, error);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tFileUtils.rmDir(rootDir, path, success, errorHandler);\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tgetPathUrl : function(path){\r\n\t\t\tif (path.charAt(0) == '/')\r\n\t\t\t\tpath = path.substring(1);\r\n\r\n\t\t\treturn rootDir.toURL() + path\r\n\t\t},\r\n\t\tinitStorage : function(success, error){\r\n\t\t\tif (rootDir){\r\n\t\t\t\tsuccess();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\trequestFileSystem(self.PERSISTENT, 5*1024*1024*1024, function(fs){\r\n\t\t\t\trootDir = fs.root;\r\n\t\t\t\tsuccess();\r\n\t\t\t}, wrapErrorHandler('init', '/', error));\r\n\t\t},\r\n\r\n\t\tmigrateLegacyBooks : function(success, error, progress){\r\n\t\t\tvar errorWrap = function(){\r\n\t\t\t\tvar data = JSON.stringify(arguments);\r\n\t\t\t\tvar errorMsg = 'Unexpected error while migrating. ' +  data;\r\n\t\t\t\tconsole.error(errorMsg)\r\n\t\t\t\terror(errorMsg);\r\n\t\t\t}\r\n\t\t\tmigrateBooks(success, errorWrap, progress);\r\n\t\t}\r\n\t}\r\n\r\n\t//$(window).bind('libraryUIReady', function(){\r\n\r\n\r\n\r\n\treturn StaticStorageManager;\r\n});\r\n\n",
    "/*\r\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\r\n\r\n Redistribution and use in source and binary forms, with or without\r\n modification, are permitted provided that the following conditions are met:\r\n\r\n 1. Redistributions of source code must retain the above copyright notice,\r\n this list of conditions and the following disclaimer.\r\n\r\n 2. Redistributions in binary form must reproduce the above copyright\r\n notice, this list of conditions and the following disclaimer in\r\n the documentation and/or other materials provided with the distribution.\r\n\r\n 3. The names of the authors may not be used to endorse or promote products\r\n derived from this software without specific prior written permission.\r\n\r\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\r\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\r\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\r\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\r\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\r\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\r\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n(function(obj) {\r\n\t\"use strict\";\r\n\r\n\tvar ERR_BAD_FORMAT = \"File format is not recognized.\";\r\n\tvar ERR_CRC = \"CRC failed.\";\r\n\tvar ERR_ENCRYPTED = \"File contains encrypted entry.\";\r\n\tvar ERR_ZIP64 = \"File is using Zip64 (4gb+ file size).\";\r\n\tvar ERR_READ = \"Error while reading zip file.\";\r\n\tvar ERR_WRITE = \"Error while writing zip file.\";\r\n\tvar ERR_WRITE_DATA = \"Error while writing file data.\";\r\n\tvar ERR_READ_DATA = \"Error while reading file data.\";\r\n\tvar ERR_DUPLICATED_NAME = \"File already exists.\";\r\n\tvar CHUNK_SIZE = 512 * 1024;\r\n\t\r\n\tvar TEXT_PLAIN = \"text/plain\";\r\n\r\n\tvar appendABViewSupported;\r\n\ttry {\r\n\t\tappendABViewSupported = new Blob([ new DataView(new ArrayBuffer(0)) ]).size === 0;\r\n\t} catch (e) {\r\n\t}\r\n\r\n\tfunction Crc32() {\r\n\t\tthis.crc = -1;\r\n\t}\r\n\tCrc32.prototype.append = function append(data) {\r\n\t\tvar crc = this.crc | 0, table = this.table;\r\n\t\tfor (var offset = 0, len = data.length | 0; offset < len; offset++)\r\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ data[offset]) & 0xFF];\r\n\t\tthis.crc = crc;\r\n\t};\r\n\tCrc32.prototype.get = function get() {\r\n\t\treturn ~this.crc;\r\n\t};\r\n\tCrc32.prototype.table = (function() {\r\n\t\tvar i, j, t, table = []; // Uint32Array is actually slower than []\r\n\t\tfor (i = 0; i < 256; i++) {\r\n\t\t\tt = i;\r\n\t\t\tfor (j = 0; j < 8; j++)\r\n\t\t\t\tif (t & 1)\r\n\t\t\t\t\tt = (t >>> 1) ^ 0xEDB88320;\r\n\t\t\t\telse\r\n\t\t\t\t\tt = t >>> 1;\r\n\t\t\ttable[i] = t;\r\n\t\t}\r\n\t\treturn table;\r\n\t})();\r\n\t\r\n\t// \"no-op\" codec\r\n\tfunction NOOP() {}\r\n\tNOOP.prototype.append = function append(bytes, onprogress) {\r\n\t\treturn bytes;\r\n\t};\r\n\tNOOP.prototype.flush = function flush() {};\r\n\r\n\tfunction blobSlice(blob, index, length) {\r\n\t\tif (index < 0 || length < 0 || index + length > blob.size)\r\n\t\t\tthrow new RangeError('offset:' + index + ', length:' + length + ', size:' + blob.size);\r\n\t\tif (blob.slice)\r\n\t\t\treturn blob.slice(index, index + length);\r\n\t\telse if (blob.webkitSlice)\r\n\t\t\treturn blob.webkitSlice(index, index + length);\r\n\t\telse if (blob.mozSlice)\r\n\t\t\treturn blob.mozSlice(index, index + length);\r\n\t\telse if (blob.msSlice)\r\n\t\t\treturn blob.msSlice(index, index + length);\r\n\t}\r\n\r\n\tfunction getDataHelper(byteLength, bytes) {\r\n\t\tvar dataBuffer, dataArray;\r\n\t\tdataBuffer = new ArrayBuffer(byteLength);\r\n\t\tdataArray = new Uint8Array(dataBuffer);\r\n\t\tif (bytes)\r\n\t\t\tdataArray.set(bytes, 0);\r\n\t\treturn {\r\n\t\t\tbuffer : dataBuffer,\r\n\t\t\tarray : dataArray,\r\n\t\t\tview : new DataView(dataBuffer)\r\n\t\t};\r\n\t}\r\n\r\n\t// Readers\r\n\tfunction Reader() {\r\n\t}\r\n\r\n\tfunction TextReader(text) {\r\n\t\tvar that = this, blobReader;\r\n\r\n\t\tfunction init(callback, onerror) {\r\n\t\t\tvar blob = new Blob([ text ], {\r\n\t\t\t\ttype : TEXT_PLAIN\r\n\t\t\t});\r\n\t\t\tblobReader = new BlobReader(blob);\r\n\t\t\tblobReader.init(function() {\r\n\t\t\t\tthat.size = blobReader.size;\r\n\t\t\t\tcallback();\r\n\t\t\t}, onerror);\r\n\t\t}\r\n\r\n\t\tfunction readUint8Array(index, length, callback, onerror) {\r\n\t\t\tblobReader.readUint8Array(index, length, callback, onerror);\r\n\t\t}\r\n\r\n\t\tthat.size = 0;\r\n\t\tthat.init = init;\r\n\t\tthat.readUint8Array = readUint8Array;\r\n\t}\r\n\tTextReader.prototype = new Reader();\r\n\tTextReader.prototype.constructor = TextReader;\r\n\r\n\tfunction Data64URIReader(dataURI) {\r\n\t\tvar that = this, dataStart;\r\n\r\n\t\tfunction init(callback) {\r\n\t\t\tvar dataEnd = dataURI.length;\r\n\t\t\twhile (dataURI.charAt(dataEnd - 1) == \"=\")\r\n\t\t\t\tdataEnd--;\r\n\t\t\tdataStart = dataURI.indexOf(\",\") + 1;\r\n\t\t\tthat.size = Math.floor((dataEnd - dataStart) * 0.75);\r\n\t\t\tcallback();\r\n\t\t}\r\n\r\n\t\tfunction readUint8Array(index, length, callback) {\r\n\t\t\tvar i, data = getDataHelper(length);\r\n\t\t\tvar start = Math.floor(index / 3) * 4;\r\n\t\t\tvar end = Math.ceil((index + length) / 3) * 4;\r\n\t\t\tvar bytes = obj.atob(dataURI.substring(start + dataStart, end + dataStart));\r\n\t\t\tvar delta = index - Math.floor(start / 4) * 3;\r\n\t\t\tfor (i = delta; i < delta + length; i++)\r\n\t\t\t\tdata.array[i - delta] = bytes.charCodeAt(i);\r\n\t\t\tcallback(data.array);\r\n\t\t}\r\n\r\n\t\tthat.size = 0;\r\n\t\tthat.init = init;\r\n\t\tthat.readUint8Array = readUint8Array;\r\n\t}\r\n\tData64URIReader.prototype = new Reader();\r\n\tData64URIReader.prototype.constructor = Data64URIReader;\r\n\r\n\tfunction BlobReader(blob) {\r\n\t\tvar that = this;\r\n\r\n\t\tfunction init(callback) {\r\n\t\t\tthat.size = blob.size;\r\n\t\t\tcallback();\r\n\t\t}\r\n\r\n\t\tfunction readUint8Array(index, length, callback, onerror) {\r\n\t\t\tvar reader = new FileReader();\r\n\t\t\treader.onload = function(e) {\r\n\t\t\t\tcallback(new Uint8Array(e.target.result));\r\n\t\t\t};\r\n\t\t\treader.onerror = onerror;\r\n\t\t\ttry {\r\n\t\t\t\treader.readAsArrayBuffer(blobSlice(blob, index, length));\r\n\t\t\t} catch (e) {\r\n\t\t\t\tonerror(e);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthat.size = 0;\r\n\t\tthat.init = init;\r\n\t\tthat.readUint8Array = readUint8Array;\r\n\t}\r\n\tBlobReader.prototype = new Reader();\r\n\tBlobReader.prototype.constructor = BlobReader;\r\n\r\n\t// Writers\r\n\r\n\tfunction Writer() {\r\n\t}\r\n\tWriter.prototype.getData = function(callback) {\r\n\t\tcallback(this.data);\r\n\t};\r\n\r\n\tfunction TextWriter(encoding) {\r\n\t\tvar that = this, blob;\r\n\r\n\t\tfunction init(callback) {\r\n\t\t\tblob = new Blob([], {\r\n\t\t\t\ttype : TEXT_PLAIN\r\n\t\t\t});\r\n\t\t\tcallback();\r\n\t\t}\r\n\r\n\t\tfunction writeUint8Array(array, callback) {\r\n\t\t\tblob = new Blob([ blob, appendABViewSupported ? array : array.buffer ], {\r\n\t\t\t\ttype : TEXT_PLAIN\r\n\t\t\t});\r\n\t\t\tcallback();\r\n\t\t}\r\n\r\n\t\tfunction getData(callback, onerror) {\r\n\t\t\tvar reader = new FileReader();\r\n\t\t\treader.onload = function(e) {\r\n\t\t\t\tcallback(e.target.result);\r\n\t\t\t};\r\n\t\t\treader.onerror = onerror;\r\n\t\t\treader.readAsText(blob, encoding);\r\n\t\t}\r\n\r\n\t\tthat.init = init;\r\n\t\tthat.writeUint8Array = writeUint8Array;\r\n\t\tthat.getData = getData;\r\n\t}\r\n\tTextWriter.prototype = new Writer();\r\n\tTextWriter.prototype.constructor = TextWriter;\r\n\r\n\tfunction Data64URIWriter(contentType) {\r\n\t\tvar that = this, data = \"\", pending = \"\";\r\n\r\n\t\tfunction init(callback) {\r\n\t\t\tdata += \"data:\" + (contentType || \"\") + \";base64,\";\r\n\t\t\tcallback();\r\n\t\t}\r\n\r\n\t\tfunction writeUint8Array(array, callback) {\r\n\t\t\tvar i, delta = pending.length, dataString = pending;\r\n\t\t\tpending = \"\";\r\n\t\t\tfor (i = 0; i < (Math.floor((delta + array.length) / 3) * 3) - delta; i++)\r\n\t\t\t\tdataString += String.fromCharCode(array[i]);\r\n\t\t\tfor (; i < array.length; i++)\r\n\t\t\t\tpending += String.fromCharCode(array[i]);\r\n\t\t\tif (dataString.length > 2)\r\n\t\t\t\tdata += obj.btoa(dataString);\r\n\t\t\telse\r\n\t\t\t\tpending = dataString;\r\n\t\t\tcallback();\r\n\t\t}\r\n\r\n\t\tfunction getData(callback) {\r\n\t\t\tcallback(data + obj.btoa(pending));\r\n\t\t}\r\n\r\n\t\tthat.init = init;\r\n\t\tthat.writeUint8Array = writeUint8Array;\r\n\t\tthat.getData = getData;\r\n\t}\r\n\tData64URIWriter.prototype = new Writer();\r\n\tData64URIWriter.prototype.constructor = Data64URIWriter;\r\n\r\n\tfunction BlobWriter(contentType) {\r\n\t\tvar data = [], that = this;\r\n\r\n\t\tfunction init(callback) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\r\n\t\tfunction writeUint8Array(array, callback) {\r\n\t\t\tdata.push(appendABViewSupported ? array : array.buffer);\r\n\t\t\tcallback();\r\n\t\t}\r\n\r\n\t\tfunction getData(callback) {\r\n\t\t\tcallback(new Blob(data, {type: contentType}));\r\n\t\t}\r\n\r\n\t\tthat.init = init;\r\n\t\tthat.writeUint8Array = writeUint8Array;\r\n\t\tthat.getData = getData;\r\n\t}\r\n\tBlobWriter.prototype = new Writer();\r\n\tBlobWriter.prototype.constructor = BlobWriter;\r\n\r\n\t/** \r\n\t * inflate/deflate core functions\r\n\t * @param worker {Worker} web worker for the task.\r\n\t * @param initialMessage {Object} initial message to be sent to the worker. should contain\r\n\t *   sn(serial number for distinguishing multiple tasks sent to the worker), and codecClass.\r\n\t *   This function may add more properties before sending.\r\n\t */\r\n\tfunction launchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror) {\r\n\t\tvar chunkIndex = 0, index, outputSize, sn = initialMessage.sn, crc;\r\n\r\n\t\tfunction onflush() {\r\n\t\t\tworker.removeEventListener('message', onmessage, false);\r\n\t\t\tonend(outputSize, crc);\r\n\t\t}\r\n\r\n\t\tfunction onmessage(event) {\r\n\t\t\tvar message = event.data, data = message.data, err = message.error;\r\n\t\t\tif (err) {\r\n\t\t\t\terr.toString = function () { return 'Error: ' + this.message; };\r\n\t\t\t\tonreaderror(err);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (message.sn !== sn)\r\n\t\t\t\treturn;\r\n\t\t\tif (typeof message.codecTime === 'number')\r\n\t\t\t\tworker.codecTime += message.codecTime; // should be before onflush()\r\n\t\t\tif (typeof message.crcTime === 'number')\r\n\t\t\t\tworker.crcTime += message.crcTime;\r\n\r\n\t\t\tswitch (message.type) {\r\n\t\t\t\tcase 'append':\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\toutputSize += data.length;\r\n\t\t\t\t\t\twriter.writeUint8Array(data, function() {\r\n\t\t\t\t\t\t\tstep();\r\n\t\t\t\t\t\t}, onwriteerror);\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tstep();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'flush':\r\n\t\t\t\t\tcrc = message.crc;\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\toutputSize += data.length;\r\n\t\t\t\t\t\twriter.writeUint8Array(data, function() {\r\n\t\t\t\t\t\t\tonflush();\r\n\t\t\t\t\t\t}, onwriteerror);\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tonflush();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'progress':\r\n\t\t\t\t\tif (onprogress)\r\n\t\t\t\t\t\tonprogress(index + message.loaded, size);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'importScripts': //no need to handle here\r\n\t\t\t\tcase 'newTask':\r\n\t\t\t\tcase 'echo':\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.warn('zip.js:launchWorkerProcess: unknown message: ', message);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction step() {\r\n\t\t\tindex = chunkIndex * CHUNK_SIZE;\r\n\t\t\tif (index < size) {\r\n\t\t\t\treader.readUint8Array(offset + index, Math.min(CHUNK_SIZE, size - index), function(array) {\r\n\t\t\t\t\tif (onprogress)\r\n\t\t\t\t\t\tonprogress(index, size);\r\n\t\t\t\t\tvar msg = index === 0 ? initialMessage : {sn : sn};\r\n\t\t\t\t\tmsg.type = 'append';\r\n\t\t\t\t\tmsg.data = array;\r\n\t\t\t\t\t\r\n\t\t\t\t\t// posting a message with transferables will fail on IE10\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tworker.postMessage(msg, [array.buffer]);\r\n\t\t\t\t\t} catch(ex) {\r\n\t\t\t\t\t\tworker.postMessage(msg); // retry without transferables\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchunkIndex++;\r\n\t\t\t\t}, onreaderror);\r\n\t\t\t} else {\r\n\t\t\t\tworker.postMessage({\r\n\t\t\t\t\tsn: sn,\r\n\t\t\t\t\ttype: 'flush'\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\toutputSize = 0;\r\n\t\tworker.addEventListener('message', onmessage, false);\r\n\t\tstep();\r\n\t}\r\n\r\n\tfunction launchProcess(process, reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror) {\r\n\t\tvar chunkIndex = 0, index, outputSize = 0,\r\n\t\t\tcrcInput = crcType === 'input',\r\n\t\t\tcrcOutput = crcType === 'output',\r\n\t\t\tcrc = new Crc32();\r\n\t\tfunction step() {\r\n\t\t\tvar outputData;\r\n\t\t\tindex = chunkIndex * CHUNK_SIZE;\r\n\t\t\tif (index < size)\r\n\t\t\t\treader.readUint8Array(offset + index, Math.min(CHUNK_SIZE, size - index), function(inputData) {\r\n\t\t\t\t\tvar outputData;\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\toutputData = process.append(inputData, function(loaded) {\r\n\t\t\t\t\t\t\tif (onprogress)\r\n\t\t\t\t\t\t\t\tonprogress(index + loaded, size);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tonreaderror(e);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (outputData) {\r\n\t\t\t\t\t\toutputSize += outputData.length;\r\n\t\t\t\t\t\twriter.writeUint8Array(outputData, function() {\r\n\t\t\t\t\t\t\tchunkIndex++;\r\n\t\t\t\t\t\t\tsetTimeout(step, 1);\r\n\t\t\t\t\t\t}, onwriteerror);\r\n\t\t\t\t\t\tif (crcOutput)\r\n\t\t\t\t\t\t\tcrc.append(outputData);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tchunkIndex++;\r\n\t\t\t\t\t\tsetTimeout(step, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (crcInput)\r\n\t\t\t\t\t\tcrc.append(inputData);\r\n\t\t\t\t\tif (onprogress)\r\n\t\t\t\t\t\tonprogress(index, size);\r\n\t\t\t\t}, onreaderror);\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\toutputData = process.flush();\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tonreaderror(e);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (outputData) {\r\n\t\t\t\t\tif (crcOutput)\r\n\t\t\t\t\t\tcrc.append(outputData);\r\n\t\t\t\t\toutputSize += outputData.length;\r\n\t\t\t\t\twriter.writeUint8Array(outputData, function() {\r\n\t\t\t\t\t\tonend(outputSize, crc.get());\r\n\t\t\t\t\t}, onwriteerror);\r\n\t\t\t\t} else\r\n\t\t\t\t\tonend(outputSize, crc.get());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tstep();\r\n\t}\r\n\r\n\tfunction inflate(worker, sn, reader, writer, offset, size, computeCrc32, onend, onprogress, onreaderror, onwriteerror) {\r\n\t\tvar crcType = computeCrc32 ? 'output' : 'none';\r\n\t\tif (obj.zip.useWebWorkers) {\r\n\t\t\tvar initialMessage = {\r\n\t\t\t\tsn: sn,\r\n\t\t\t\tcodecClass: 'Inflater',\r\n\t\t\t\tcrcType: crcType,\r\n\t\t\t};\r\n\t\t\tlaunchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror);\r\n\t\t} else\r\n\t\t\tlaunchProcess(new obj.zip.Inflater(), reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror);\r\n\t}\r\n\r\n\tfunction deflate(worker, sn, reader, writer, level, onend, onprogress, onreaderror, onwriteerror) {\r\n\t\tvar crcType = 'input';\r\n\t\tif (obj.zip.useWebWorkers) {\r\n\t\t\tvar initialMessage = {\r\n\t\t\t\tsn: sn,\r\n\t\t\t\toptions: {level: level},\r\n\t\t\t\tcodecClass: 'Deflater',\r\n\t\t\t\tcrcType: crcType,\r\n\t\t\t};\r\n\t\t\tlaunchWorkerProcess(worker, initialMessage, reader, writer, 0, reader.size, onprogress, onend, onreaderror, onwriteerror);\r\n\t\t} else\r\n\t\t\tlaunchProcess(new obj.zip.Deflater(), reader, writer, 0, reader.size, crcType, onprogress, onend, onreaderror, onwriteerror);\r\n\t}\r\n\r\n\tfunction copy(worker, sn, reader, writer, offset, size, computeCrc32, onend, onprogress, onreaderror, onwriteerror) {\r\n\t\tvar crcType = 'input';\r\n\t\tif (obj.zip.useWebWorkers && computeCrc32) {\r\n\t\t\tvar initialMessage = {\r\n\t\t\t\tsn: sn,\r\n\t\t\t\tcodecClass: 'NOOP',\r\n\t\t\t\tcrcType: crcType,\r\n\t\t\t};\r\n\t\t\tlaunchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror);\r\n\t\t} else\r\n\t\t\tlaunchProcess(new NOOP(), reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror);\r\n\t}\r\n\r\n\t// ZipReader\r\n\r\n\tfunction decodeASCII(str) {\r\n\t\tvar i, out = \"\", charCode, extendedASCII = [ '\\u00C7', '\\u00FC', '\\u00E9', '\\u00E2', '\\u00E4', '\\u00E0', '\\u00E5', '\\u00E7', '\\u00EA', '\\u00EB',\r\n\t\t\t\t'\\u00E8', '\\u00EF', '\\u00EE', '\\u00EC', '\\u00C4', '\\u00C5', '\\u00C9', '\\u00E6', '\\u00C6', '\\u00F4', '\\u00F6', '\\u00F2', '\\u00FB', '\\u00F9',\r\n\t\t\t\t'\\u00FF', '\\u00D6', '\\u00DC', '\\u00F8', '\\u00A3', '\\u00D8', '\\u00D7', '\\u0192', '\\u00E1', '\\u00ED', '\\u00F3', '\\u00FA', '\\u00F1', '\\u00D1',\r\n\t\t\t\t'\\u00AA', '\\u00BA', '\\u00BF', '\\u00AE', '\\u00AC', '\\u00BD', '\\u00BC', '\\u00A1', '\\u00AB', '\\u00BB', '_', '_', '_', '\\u00A6', '\\u00A6',\r\n\t\t\t\t'\\u00C1', '\\u00C2', '\\u00C0', '\\u00A9', '\\u00A6', '\\u00A6', '+', '+', '\\u00A2', '\\u00A5', '+', '+', '-', '-', '+', '-', '+', '\\u00E3',\r\n\t\t\t\t'\\u00C3', '+', '+', '-', '-', '\\u00A6', '-', '+', '\\u00A4', '\\u00F0', '\\u00D0', '\\u00CA', '\\u00CB', '\\u00C8', 'i', '\\u00CD', '\\u00CE',\r\n\t\t\t\t'\\u00CF', '+', '+', '_', '_', '\\u00A6', '\\u00CC', '_', '\\u00D3', '\\u00DF', '\\u00D4', '\\u00D2', '\\u00F5', '\\u00D5', '\\u00B5', '\\u00FE',\r\n\t\t\t\t'\\u00DE', '\\u00DA', '\\u00DB', '\\u00D9', '\\u00FD', '\\u00DD', '\\u00AF', '\\u00B4', '\\u00AD', '\\u00B1', '_', '\\u00BE', '\\u00B6', '\\u00A7',\r\n\t\t\t\t'\\u00F7', '\\u00B8', '\\u00B0', '\\u00A8', '\\u00B7', '\\u00B9', '\\u00B3', '\\u00B2', '_', ' ' ];\r\n\t\tfor (i = 0; i < str.length; i++) {\r\n\t\t\tcharCode = str.charCodeAt(i) & 0xFF;\r\n\t\t\tif (charCode > 127)\r\n\t\t\t\tout += extendedASCII[charCode - 128];\r\n\t\t\telse\r\n\t\t\t\tout += String.fromCharCode(charCode);\r\n\t\t}\r\n\t\treturn out;\r\n\t}\r\n\r\n\tfunction decodeUTF8(string) {\r\n\t\treturn decodeURIComponent(escape(string));\r\n\t}\r\n\r\n\tfunction getString(bytes) {\r\n\t\tvar i, str = \"\";\r\n\t\tfor (i = 0; i < bytes.length; i++)\r\n\t\t\tstr += String.fromCharCode(bytes[i]);\r\n\t\treturn str;\r\n\t}\r\n\r\n\tfunction getDate(timeRaw) {\r\n\t\tvar date = (timeRaw & 0xffff0000) >> 16, time = timeRaw & 0x0000ffff;\r\n\t\ttry {\r\n\t\t\treturn new Date(1980 + ((date & 0xFE00) >> 9), ((date & 0x01E0) >> 5) - 1, date & 0x001F, (time & 0xF800) >> 11, (time & 0x07E0) >> 5,\r\n\t\t\t\t\t(time & 0x001F) * 2, 0);\r\n\t\t} catch (e) {\r\n\t\t}\r\n\t}\r\n\r\n\tfunction readCommonHeader(entry, data, index, centralDirectory, onerror) {\r\n\t\tentry.version = data.view.getUint16(index, true);\r\n\t\tentry.bitFlag = data.view.getUint16(index + 2, true);\r\n\t\tentry.compressionMethod = data.view.getUint16(index + 4, true);\r\n\t\tentry.lastModDateRaw = data.view.getUint32(index + 6, true);\r\n\t\tentry.lastModDate = getDate(entry.lastModDateRaw);\r\n\t\tif ((entry.bitFlag & 0x01) === 0x01) {\r\n\t\t\tonerror(ERR_ENCRYPTED);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (centralDirectory || (entry.bitFlag & 0x0008) != 0x0008) {\r\n\t\t\tentry.crc32 = data.view.getUint32(index + 10, true);\r\n\t\t\tentry.compressedSize = data.view.getUint32(index + 14, true);\r\n\t\t\tentry.uncompressedSize = data.view.getUint32(index + 18, true);\r\n\t\t}\r\n\t\tif (entry.compressedSize === 0xFFFFFFFF || entry.uncompressedSize === 0xFFFFFFFF) {\r\n\t\t\tonerror(ERR_ZIP64);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tentry.filenameLength = data.view.getUint16(index + 22, true);\r\n\t\tentry.extraFieldLength = data.view.getUint16(index + 24, true);\r\n\t}\r\n\r\n\tfunction createZipReader(reader, callback, onerror) {\r\n\t\tvar inflateSN = 0;\r\n\r\n\t\tfunction Entry() {\r\n\t\t}\r\n\r\n\t\tEntry.prototype.getData = function(writer, onend, onprogress, checkCrc32) {\r\n\t\t\tvar that = this;\r\n\r\n\t\t\tfunction testCrc32(crc32) {\r\n\t\t\t\tvar dataCrc32 = getDataHelper(4);\r\n\t\t\t\tdataCrc32.view.setUint32(0, crc32);\r\n\t\t\t\treturn that.crc32 == dataCrc32.view.getUint32(0);\r\n\t\t\t}\r\n\r\n\t\t\tfunction getWriterData(uncompressedSize, crc32) {\r\n\t\t\t\tif (checkCrc32 && !testCrc32(crc32))\r\n\t\t\t\t\tonerror(ERR_CRC);\r\n\t\t\t\telse\r\n\t\t\t\t\twriter.getData(function(data) {\r\n\t\t\t\t\t\tonend(data);\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tfunction onreaderror(err) {\r\n\t\t\t\tonerror(err || ERR_READ_DATA);\r\n\t\t\t}\r\n\r\n\t\t\tfunction onwriteerror(err) {\r\n\t\t\t\tonerror(err || ERR_WRITE_DATA);\r\n\t\t\t}\r\n\r\n\t\t\treader.readUint8Array(that.offset, 30, function(bytes) {\r\n\t\t\t\tvar data = getDataHelper(bytes.length, bytes), dataOffset;\r\n\t\t\t\tif (data.view.getUint32(0) != 0x504b0304) {\r\n\t\t\t\t\tonerror(ERR_BAD_FORMAT);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\treadCommonHeader(that, data, 4, false, onerror);\r\n\t\t\t\tdataOffset = that.offset + 30 + that.filenameLength + that.extraFieldLength;\r\n\t\t\t\twriter.init(function() {\r\n\t\t\t\t\tif (that.compressionMethod === 0)\r\n\t\t\t\t\t\tcopy(that._worker, inflateSN++, reader, writer, dataOffset, that.compressedSize, checkCrc32, getWriterData, onprogress, onreaderror, onwriteerror);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tinflate(that._worker, inflateSN++, reader, writer, dataOffset, that.compressedSize, checkCrc32, getWriterData, onprogress, onreaderror, onwriteerror);\r\n\t\t\t\t}, onwriteerror);\r\n\t\t\t}, onreaderror);\r\n\t\t};\r\n\r\n\t\tfunction seekEOCDR(eocdrCallback) {\r\n\t\t\t// \"End of central directory record\" is the last part of a zip archive, and is at least 22 bytes long.\r\n\t\t\t// Zip file comment is the last part of EOCDR and has max length of 64KB,\r\n\t\t\t// so we only have to search the last 64K + 22 bytes of a archive for EOCDR signature (0x06054b50).\r\n\t\t\tvar EOCDR_MIN = 22;\r\n\t\t\tif (reader.size < EOCDR_MIN) {\r\n\t\t\t\tonerror(ERR_BAD_FORMAT);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar ZIP_COMMENT_MAX = 256 * 256, EOCDR_MAX = EOCDR_MIN + ZIP_COMMENT_MAX;\r\n\r\n\t\t\t// In most cases, the EOCDR is EOCDR_MIN bytes long\r\n\t\t\tdoSeek(EOCDR_MIN, function() {\r\n\t\t\t\t// If not found, try within EOCDR_MAX bytes\r\n\t\t\t\tdoSeek(Math.min(EOCDR_MAX, reader.size), function() {\r\n\t\t\t\t\tonerror(ERR_BAD_FORMAT);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\t// seek last length bytes of file for EOCDR\r\n\t\t\tfunction doSeek(length, eocdrNotFoundCallback) {\r\n\t\t\t\treader.readUint8Array(reader.size - length, length, function(bytes) {\r\n\t\t\t\t\tfor (var i = bytes.length - EOCDR_MIN; i >= 0; i--) {\r\n\t\t\t\t\t\tif (bytes[i] === 0x50 && bytes[i + 1] === 0x4b && bytes[i + 2] === 0x05 && bytes[i + 3] === 0x06) {\r\n\t\t\t\t\t\t\teocdrCallback(new DataView(bytes.buffer, i, EOCDR_MIN));\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\teocdrNotFoundCallback();\r\n\t\t\t\t}, function() {\r\n\t\t\t\t\tonerror(ERR_READ);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar zipReader = {\r\n\t\t\tgetEntries : function(callback) {\r\n\t\t\t\tvar worker = this._worker;\r\n\t\t\t\t// look for End of central directory record\r\n\t\t\t\tseekEOCDR(function(dataView) {\r\n\t\t\t\t\tvar datalength, fileslength;\r\n\t\t\t\t\tdatalength = dataView.getUint32(16, true);\r\n\t\t\t\t\tfileslength = dataView.getUint16(8, true);\r\n\t\t\t\t\tif (datalength < 0 || datalength >= reader.size) {\r\n\t\t\t\t\t\tonerror(ERR_BAD_FORMAT);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treader.readUint8Array(datalength, reader.size - datalength, function(bytes) {\r\n\t\t\t\t\t\tvar i, index = 0, entries = [], entry, filename, comment, data = getDataHelper(bytes.length, bytes);\r\n\t\t\t\t\t\tfor (i = 0; i < fileslength; i++) {\r\n\t\t\t\t\t\t\tentry = new Entry();\r\n\t\t\t\t\t\t\tentry._worker = worker;\r\n\t\t\t\t\t\t\tif (data.view.getUint32(index) != 0x504b0102) {\r\n\t\t\t\t\t\t\t\tonerror(ERR_BAD_FORMAT);\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treadCommonHeader(entry, data, index + 6, true, onerror);\r\n\t\t\t\t\t\t\tentry.commentLength = data.view.getUint16(index + 32, true);\r\n\t\t\t\t\t\t\tentry.directory = ((data.view.getUint8(index + 38) & 0x10) == 0x10);\r\n\t\t\t\t\t\t\tentry.offset = data.view.getUint32(index + 42, true);\r\n\t\t\t\t\t\t\tfilename = getString(data.array.subarray(index + 46, index + 46 + entry.filenameLength));\r\n\t\t\t\t\t\t\tentry.filename = ((entry.bitFlag & 0x0800) === 0x0800) ? decodeUTF8(filename) : decodeASCII(filename);\r\n\t\t\t\t\t\t\tif (!entry.directory && entry.filename.charAt(entry.filename.length - 1) == \"/\")\r\n\t\t\t\t\t\t\t\tentry.directory = true;\r\n\t\t\t\t\t\t\tcomment = getString(data.array.subarray(index + 46 + entry.filenameLength + entry.extraFieldLength, index + 46\r\n\t\t\t\t\t\t\t\t\t+ entry.filenameLength + entry.extraFieldLength + entry.commentLength));\r\n\t\t\t\t\t\t\tentry.comment = ((entry.bitFlag & 0x0800) === 0x0800) ? decodeUTF8(comment) : decodeASCII(comment);\r\n\t\t\t\t\t\t\tentries.push(entry);\r\n\t\t\t\t\t\t\tindex += 46 + entry.filenameLength + entry.extraFieldLength + entry.commentLength;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcallback(entries);\r\n\t\t\t\t\t}, function() {\r\n\t\t\t\t\t\tonerror(ERR_READ);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tclose : function(callback) {\r\n\t\t\t\tif (this._worker) {\r\n\t\t\t\t\tthis._worker.terminate();\r\n\t\t\t\t\tthis._worker = null;\r\n\t\t\t\t}\r\n\t\t\t\tif (callback)\r\n\t\t\t\t\tcallback();\r\n\t\t\t},\r\n\t\t\t_worker: null\r\n\t\t};\r\n\r\n\t\tif (!obj.zip.useWebWorkers)\r\n\t\t\tcallback(zipReader);\r\n\t\telse {\r\n\t\t\tcreateWorker('inflater',\r\n\t\t\t\tfunction(worker) {\r\n\t\t\t\t\tzipReader._worker = worker;\r\n\t\t\t\t\tcallback(zipReader);\r\n\t\t\t\t},\r\n\t\t\t\tfunction(err) {\r\n\t\t\t\t\tonerror(err);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t// ZipWriter\r\n\r\n\tfunction encodeUTF8(string) {\r\n\t\treturn unescape(encodeURIComponent(string));\r\n\t}\r\n\r\n\tfunction getBytes(str) {\r\n\t\tvar i, array = [];\r\n\t\tfor (i = 0; i < str.length; i++)\r\n\t\t\tarray.push(str.charCodeAt(i));\r\n\t\treturn array;\r\n\t}\r\n\r\n\tfunction createZipWriter(writer, callback, onerror, dontDeflate) {\r\n\t\tvar files = {}, filenames = [], datalength = 0;\r\n\t\tvar deflateSN = 0;\r\n\r\n\t\tfunction onwriteerror(err) {\r\n\t\t\tonerror(err || ERR_WRITE);\r\n\t\t}\r\n\r\n\t\tfunction onreaderror(err) {\r\n\t\t\tonerror(err || ERR_READ_DATA);\r\n\t\t}\r\n\r\n\t\tvar zipWriter = {\r\n\t\t\tadd : function(name, reader, onend, onprogress, options) {\r\n\t\t\t\tvar header, filename, date;\r\n\t\t\t\tvar worker = this._worker;\r\n\r\n\t\t\t\tfunction writeHeader(callback) {\r\n\t\t\t\t\tvar data;\r\n\t\t\t\t\tdate = options.lastModDate || new Date();\r\n\t\t\t\t\theader = getDataHelper(26);\r\n\t\t\t\t\tfiles[name] = {\r\n\t\t\t\t\t\theaderArray : header.array,\r\n\t\t\t\t\t\tdirectory : options.directory,\r\n\t\t\t\t\t\tfilename : filename,\r\n\t\t\t\t\t\toffset : datalength,\r\n\t\t\t\t\t\tcomment : getBytes(encodeUTF8(options.comment || \"\"))\r\n\t\t\t\t\t};\r\n\t\t\t\t\theader.view.setUint32(0, 0x14000808);\r\n\t\t\t\t\tif (options.version)\r\n\t\t\t\t\t\theader.view.setUint8(0, options.version);\r\n\t\t\t\t\tif (!dontDeflate && options.level !== 0 && !options.directory)\r\n\t\t\t\t\t\theader.view.setUint16(4, 0x0800);\r\n\t\t\t\t\theader.view.setUint16(6, (((date.getHours() << 6) | date.getMinutes()) << 5) | date.getSeconds() / 2, true);\r\n\t\t\t\t\theader.view.setUint16(8, ((((date.getFullYear() - 1980) << 4) | (date.getMonth() + 1)) << 5) | date.getDate(), true);\r\n\t\t\t\t\theader.view.setUint16(22, filename.length, true);\r\n\t\t\t\t\tdata = getDataHelper(30 + filename.length);\r\n\t\t\t\t\tdata.view.setUint32(0, 0x504b0304);\r\n\t\t\t\t\tdata.array.set(header.array, 4);\r\n\t\t\t\t\tdata.array.set(filename, 30);\r\n\t\t\t\t\tdatalength += data.array.length;\r\n\t\t\t\t\twriter.writeUint8Array(data.array, callback, onwriteerror);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction writeFooter(compressedLength, crc32) {\r\n\t\t\t\t\tvar footer = getDataHelper(16);\r\n\t\t\t\t\tdatalength += compressedLength || 0;\r\n\t\t\t\t\tfooter.view.setUint32(0, 0x504b0708);\r\n\t\t\t\t\tif (typeof crc32 != \"undefined\") {\r\n\t\t\t\t\t\theader.view.setUint32(10, crc32, true);\r\n\t\t\t\t\t\tfooter.view.setUint32(4, crc32, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (reader) {\r\n\t\t\t\t\t\tfooter.view.setUint32(8, compressedLength, true);\r\n\t\t\t\t\t\theader.view.setUint32(14, compressedLength, true);\r\n\t\t\t\t\t\tfooter.view.setUint32(12, reader.size, true);\r\n\t\t\t\t\t\theader.view.setUint32(18, reader.size, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\twriter.writeUint8Array(footer.array, function() {\r\n\t\t\t\t\t\tdatalength += 16;\r\n\t\t\t\t\t\tonend();\r\n\t\t\t\t\t}, onwriteerror);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction writeFile() {\r\n\t\t\t\t\toptions = options || {};\r\n\t\t\t\t\tname = name.trim();\r\n\t\t\t\t\tif (options.directory && name.charAt(name.length - 1) != \"/\")\r\n\t\t\t\t\t\tname += \"/\";\r\n\t\t\t\t\tif (files.hasOwnProperty(name)) {\r\n\t\t\t\t\t\tonerror(ERR_DUPLICATED_NAME);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfilename = getBytes(encodeUTF8(name));\r\n\t\t\t\t\tfilenames.push(name);\r\n\t\t\t\t\twriteHeader(function() {\r\n\t\t\t\t\t\tif (reader)\r\n\t\t\t\t\t\t\tif (dontDeflate || options.level === 0)\r\n\t\t\t\t\t\t\t\tcopy(worker, deflateSN++, reader, writer, 0, reader.size, true, writeFooter, onprogress, onreaderror, onwriteerror);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tdeflate(worker, deflateSN++, reader, writer, options.level, writeFooter, onprogress, onreaderror, onwriteerror);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\twriteFooter();\r\n\t\t\t\t\t}, onwriteerror);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (reader)\r\n\t\t\t\t\treader.init(writeFile, onreaderror);\r\n\t\t\t\telse\r\n\t\t\t\t\twriteFile();\r\n\t\t\t},\r\n\t\t\tclose : function(callback) {\r\n\t\t\t\tif (this._worker) {\r\n\t\t\t\t\tthis._worker.terminate();\r\n\t\t\t\t\tthis._worker = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar data, length = 0, index = 0, indexFilename, file;\r\n\t\t\t\tfor (indexFilename = 0; indexFilename < filenames.length; indexFilename++) {\r\n\t\t\t\t\tfile = files[filenames[indexFilename]];\r\n\t\t\t\t\tlength += 46 + file.filename.length + file.comment.length;\r\n\t\t\t\t}\r\n\t\t\t\tdata = getDataHelper(length + 22);\r\n\t\t\t\tfor (indexFilename = 0; indexFilename < filenames.length; indexFilename++) {\r\n\t\t\t\t\tfile = files[filenames[indexFilename]];\r\n\t\t\t\t\tdata.view.setUint32(index, 0x504b0102);\r\n\t\t\t\t\tdata.view.setUint16(index + 4, 0x1400);\r\n\t\t\t\t\tdata.array.set(file.headerArray, index + 6);\r\n\t\t\t\t\tdata.view.setUint16(index + 32, file.comment.length, true);\r\n\t\t\t\t\tif (file.directory)\r\n\t\t\t\t\t\tdata.view.setUint8(index + 38, 0x10);\r\n\t\t\t\t\tdata.view.setUint32(index + 42, file.offset, true);\r\n\t\t\t\t\tdata.array.set(file.filename, index + 46);\r\n\t\t\t\t\tdata.array.set(file.comment, index + 46 + file.filename.length);\r\n\t\t\t\t\tindex += 46 + file.filename.length + file.comment.length;\r\n\t\t\t\t}\r\n\t\t\t\tdata.view.setUint32(index, 0x504b0506);\r\n\t\t\t\tdata.view.setUint16(index + 8, filenames.length, true);\r\n\t\t\t\tdata.view.setUint16(index + 10, filenames.length, true);\r\n\t\t\t\tdata.view.setUint32(index + 12, length, true);\r\n\t\t\t\tdata.view.setUint32(index + 16, datalength, true);\r\n\t\t\t\twriter.writeUint8Array(data.array, function() {\r\n\t\t\t\t\twriter.getData(callback);\r\n\t\t\t\t}, onwriteerror);\r\n\t\t\t},\r\n\t\t\t_worker: null\r\n\t\t};\r\n\r\n\t\tif (!obj.zip.useWebWorkers)\r\n\t\t\tcallback(zipWriter);\r\n\t\telse {\r\n\t\t\tcreateWorker('deflater',\r\n\t\t\t\tfunction(worker) {\r\n\t\t\t\t\tzipWriter._worker = worker;\r\n\t\t\t\t\tcallback(zipWriter);\r\n\t\t\t\t},\r\n\t\t\t\tfunction(err) {\r\n\t\t\t\t\tonerror(err);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction resolveURLs(urls) {\r\n\t\tvar a = document.createElement('a');\r\n\t\treturn urls.map(function(url) {\r\n\t\t\ta.href = url;\r\n\t\t\treturn a.href;\r\n\t\t});\r\n\t}\r\n\r\n\tvar DEFAULT_WORKER_SCRIPTS = {\r\n\t\tdeflater: ['z-worker.js', 'deflate.js'],\r\n\t\tinflater: ['z-worker.js', 'inflate.js']\r\n\t};\r\n\tfunction createWorker(type, callback, onerror) {\r\n\t\tif (obj.zip.workerScripts !== null && obj.zip.workerScriptsPath !== null) {\r\n\t\t\tonerror(new Error('Either zip.workerScripts or zip.workerScriptsPath may be set, not both.'));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar scripts;\r\n\t\tif (obj.zip.workerScripts) {\r\n\t\t\tscripts = obj.zip.workerScripts[type];\r\n\t\t\tif (!Array.isArray(scripts)) {\r\n\t\t\t\tonerror(new Error('zip.workerScripts.' + type + ' is not an array!'));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tscripts = resolveURLs(scripts);\r\n\t\t} else {\r\n\t\t\tscripts = DEFAULT_WORKER_SCRIPTS[type].slice(0);\r\n\t\t\tscripts[0] = (obj.zip.workerScriptsPath || '') + scripts[0];\r\n\t\t}\r\n\t\tvar worker = new Worker(scripts[0]);\r\n\t\t// record total consumed time by inflater/deflater/crc32 in this worker\r\n\t\tworker.codecTime = worker.crcTime = 0;\r\n\t\tworker.postMessage({ type: 'importScripts', scripts: scripts.slice(1) });\r\n\t\tworker.addEventListener('message', onmessage);\r\n\t\tfunction onmessage(ev) {\r\n\t\t\tvar msg = ev.data;\r\n\t\t\tif (msg.error) {\r\n\t\t\t\tworker.terminate(); // should before onerror(), because onerror() may throw.\r\n\t\t\t\tonerror(msg.error);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (msg.type === 'importScripts') {\r\n\t\t\t\tworker.removeEventListener('message', onmessage);\r\n\t\t\t\tworker.removeEventListener('error', errorHandler);\r\n\t\t\t\tcallback(worker);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// catch entry script loading error and other unhandled errors\r\n\t\tworker.addEventListener('error', errorHandler);\r\n\t\tfunction errorHandler(err) {\r\n\t\t\tworker.terminate();\r\n\t\t\tonerror(err);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onerror_default(error) {\r\n\t\tconsole.error(error);\r\n\t}\r\n\tobj.zip = {\r\n\t\tReader : Reader,\r\n\t\tWriter : Writer,\r\n\t\tBlobReader : BlobReader,\r\n\t\tData64URIReader : Data64URIReader,\r\n\t\tTextReader : TextReader,\r\n\t\tBlobWriter : BlobWriter,\r\n\t\tData64URIWriter : Data64URIWriter,\r\n\t\tTextWriter : TextWriter,\r\n\t\tcreateReader : function(reader, callback, onerror) {\r\n\t\t\tonerror = onerror || onerror_default;\r\n\r\n\t\t\treader.init(function() {\r\n\t\t\t\tcreateZipReader(reader, callback, onerror);\r\n\t\t\t}, onerror);\r\n\t\t},\r\n\t\tcreateWriter : function(writer, callback, onerror, dontDeflate) {\r\n\t\t\tonerror = onerror || onerror_default;\r\n\t\t\tdontDeflate = !!dontDeflate;\r\n\r\n\t\t\twriter.init(function() {\r\n\t\t\t\tcreateZipWriter(writer, callback, onerror, dontDeflate);\r\n\t\t\t}, onerror);\r\n\t\t},\r\n\t\tuseWebWorkers : true,\r\n\t\t/**\r\n\t\t * Directory containing the default worker scripts (z-worker.js, deflate.js, and inflate.js), relative to current base url.\r\n\t\t * E.g.: zip.workerScripts = './';\r\n\t\t */\r\n\t\tworkerScriptsPath : null,\r\n\t\t/**\r\n\t\t * Advanced option to control which scripts are loaded in the Web worker. If this option is specified, then workerScriptsPath must not be set.\r\n\t\t * workerScripts.deflater/workerScripts.inflater should be arrays of urls to scripts for deflater/inflater, respectively.\r\n\t\t * Scripts in the array are executed in order, and the first one should be z-worker.js, which is used to start the worker.\r\n\t\t * All urls are relative to current base url.\r\n\t\t * E.g.:\r\n\t\t * zip.workerScripts = {\r\n\t\t *   deflater: ['z-worker.js', 'deflate.js'],\r\n\t\t *   inflater: ['z-worker.js', 'inflate.js']\r\n\t\t * };\r\n\t\t */\r\n\t\tworkerScripts : null,\r\n\t};\r\n\r\n})(this);\r\n\ndefine(\"zip\", (function (global) {\n    return function () {\n        var ret, fn;\n        return ret || global.zip;\n    };\n}(this)));\n\n",
    "/*\r\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\r\n\r\n Redistribution and use in source and binary forms, with or without\r\n modification, are permitted provided that the following conditions are met:\r\n\r\n 1. Redistributions of source code must retain the above copyright notice,\r\n this list of conditions and the following disclaimer.\r\n\r\n 2. Redistributions in binary form must reproduce the above copyright \r\n notice, this list of conditions and the following disclaimer in \r\n the documentation and/or other materials provided with the distribution.\r\n\r\n 3. The names of the authors may not be used to endorse or promote products\r\n derived from this software without specific prior written permission.\r\n\r\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\r\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\r\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\r\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\r\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\r\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\r\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/*\r\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\r\n * JZlib is based on zlib-1.1.3, so all credit should go authors\r\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\r\n * and contributors of zlib.\r\n */\r\n\r\n(function(global) {\r\n\t\"use strict\";\r\n\r\n\t// Global\r\n\tvar MAX_BITS = 15;\r\n\r\n\tvar Z_OK = 0;\r\n\tvar Z_STREAM_END = 1;\r\n\tvar Z_NEED_DICT = 2;\r\n\tvar Z_STREAM_ERROR = -2;\r\n\tvar Z_DATA_ERROR = -3;\r\n\tvar Z_MEM_ERROR = -4;\r\n\tvar Z_BUF_ERROR = -5;\r\n\r\n\tvar inflate_mask = [ 0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff,\r\n\t\t\t0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff ];\r\n\r\n\tvar MANY = 1440;\r\n\r\n\t// JZlib version : \"1.0.2\"\r\n\tvar Z_NO_FLUSH = 0;\r\n\tvar Z_FINISH = 4;\r\n\r\n\t// InfTree\r\n\tvar fixed_bl = 9;\r\n\tvar fixed_bd = 5;\r\n\r\n\tvar fixed_tl = [ 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0,\r\n\t\t\t0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40,\r\n\t\t\t0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13,\r\n\t\t\t0, 8, 100, 0, 8, 36, 0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60,\r\n\t\t\t0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7,\r\n\t\t\t35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8,\r\n\t\t\t26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 180, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80,\r\n\t\t\t7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0,\r\n\t\t\t8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0,\r\n\t\t\t8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97,\r\n\t\t\t0, 8, 33, 0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210,\r\n\t\t\t81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117,\r\n\t\t\t0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154,\r\n\t\t\t84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83,\r\n\t\t\t0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230,\r\n\t\t\t80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139,\r\n\t\t\t0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174,\r\n\t\t\t0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111,\r\n\t\t\t0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9,\r\n\t\t\t193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8,\r\n\t\t\t120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8,\r\n\t\t\t227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8,\r\n\t\t\t92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9,\r\n\t\t\t249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8,\r\n\t\t\t130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9,\r\n\t\t\t181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8,\r\n\t\t\t102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9,\r\n\t\t\t221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0,\r\n\t\t\t8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9,\r\n\t\t\t147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8,\r\n\t\t\t85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9,\r\n\t\t\t235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8,\r\n\t\t\t141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9,\r\n\t\t\t167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8,\r\n\t\t\t107, 0, 8, 43, 0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9,\r\n\t\t\t207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8,\r\n\t\t\t127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255 ];\r\n\tvar fixed_td = [ 80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5,\r\n\t\t\t8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5,\r\n\t\t\t24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577 ];\r\n\r\n\t// Tables for deflate from PKZIP's appnote.txt.\r\n\tvar cplens = [ // Copy lengths for literal codes 257..285\r\n\t3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0 ];\r\n\r\n\t// see note #13 above about 258\r\n\tvar cplext = [ // Extra bits for literal codes 257..285\r\n\t0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112 // 112==invalid\r\n\t];\r\n\r\n\tvar cpdist = [ // Copy offsets for distance codes 0..29\r\n\t1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ];\r\n\r\n\tvar cpdext = [ // Extra bits for distance codes\r\n\t0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ];\r\n\r\n\t// If BMAX needs to be larger than 16, then h and x[] should be uLong.\r\n\tvar BMAX = 15; // maximum bit length of any code\r\n\r\n\tfunction InfTree() {\r\n\t\tvar that = this;\r\n\r\n\t\tvar hn; // hufts used in space\r\n\t\tvar v; // work area for huft_build\r\n\t\tvar c; // bit length count table\r\n\t\tvar r; // table entry for structure assignment\r\n\t\tvar u; // table stack\r\n\t\tvar x; // bit offsets, then code stack\r\n\r\n\t\tfunction huft_build(b, // code lengths in bits (all assumed <=\r\n\t\t// BMAX)\r\n\t\tbindex, n, // number of codes (assumed <= 288)\r\n\t\ts, // number of simple-valued codes (0..s-1)\r\n\t\td, // list of base values for non-simple codes\r\n\t\te, // list of extra bits for non-simple codes\r\n\t\tt, // result: starting table\r\n\t\tm, // maximum lookup bits, returns actual\r\n\t\thp,// space for trees\r\n\t\thn,// hufts used in space\r\n\t\tv // working area: values in order of bit length\r\n\t\t) {\r\n\t\t\t// Given a list of code lengths and a maximum table size, make a set of\r\n\t\t\t// tables to decode that set of codes. Return Z_OK on success,\r\n\t\t\t// Z_BUF_ERROR\r\n\t\t\t// if the given code set is incomplete (the tables are still built in\r\n\t\t\t// this\r\n\t\t\t// case), Z_DATA_ERROR if the input is invalid (an over-subscribed set\r\n\t\t\t// of\r\n\t\t\t// lengths), or Z_MEM_ERROR if not enough memory.\r\n\r\n\t\t\tvar a; // counter for codes of length k\r\n\t\t\tvar f; // i repeats in table every f entries\r\n\t\t\tvar g; // maximum code length\r\n\t\t\tvar h; // table level\r\n\t\t\tvar i; // counter, current code\r\n\t\t\tvar j; // counter\r\n\t\t\tvar k; // number of bits in current code\r\n\t\t\tvar l; // bits per table (returned in m)\r\n\t\t\tvar mask; // (1 << w) - 1, to avoid cc -O bug on HP\r\n\t\t\tvar p; // pointer into c[], b[], or v[]\r\n\t\t\tvar q; // points to current table\r\n\t\t\tvar w; // bits before this table == (l * h)\r\n\t\t\tvar xp; // pointer into x\r\n\t\t\tvar y; // number of dummy codes added\r\n\t\t\tvar z; // number of entries in current table\r\n\r\n\t\t\t// Generate counts for each bit length\r\n\r\n\t\t\tp = 0;\r\n\t\t\ti = n;\r\n\t\t\tdo {\r\n\t\t\t\tc[b[bindex + p]]++;\r\n\t\t\t\tp++;\r\n\t\t\t\ti--; // assume all entries <= BMAX\r\n\t\t\t} while (i !== 0);\r\n\r\n\t\t\tif (c[0] == n) { // null input--all zero length codes\r\n\t\t\t\tt[0] = -1;\r\n\t\t\t\tm[0] = 0;\r\n\t\t\t\treturn Z_OK;\r\n\t\t\t}\r\n\r\n\t\t\t// Find minimum and maximum length, bound *m by those\r\n\t\t\tl = m[0];\r\n\t\t\tfor (j = 1; j <= BMAX; j++)\r\n\t\t\t\tif (c[j] !== 0)\r\n\t\t\t\t\tbreak;\r\n\t\t\tk = j; // minimum code length\r\n\t\t\tif (l < j) {\r\n\t\t\t\tl = j;\r\n\t\t\t}\r\n\t\t\tfor (i = BMAX; i !== 0; i--) {\r\n\t\t\t\tif (c[i] !== 0)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tg = i; // maximum code length\r\n\t\t\tif (l > i) {\r\n\t\t\t\tl = i;\r\n\t\t\t}\r\n\t\t\tm[0] = l;\r\n\r\n\t\t\t// Adjust last length count to fill out codes, if needed\r\n\t\t\tfor (y = 1 << j; j < i; j++, y <<= 1) {\r\n\t\t\t\tif ((y -= c[j]) < 0) {\r\n\t\t\t\t\treturn Z_DATA_ERROR;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ((y -= c[i]) < 0) {\r\n\t\t\t\treturn Z_DATA_ERROR;\r\n\t\t\t}\r\n\t\t\tc[i] += y;\r\n\r\n\t\t\t// Generate starting offsets into the value table for each length\r\n\t\t\tx[1] = j = 0;\r\n\t\t\tp = 1;\r\n\t\t\txp = 2;\r\n\t\t\twhile (--i !== 0) { // note that i == g from above\r\n\t\t\t\tx[xp] = (j += c[p]);\r\n\t\t\t\txp++;\r\n\t\t\t\tp++;\r\n\t\t\t}\r\n\r\n\t\t\t// Make a table of values in order of bit lengths\r\n\t\t\ti = 0;\r\n\t\t\tp = 0;\r\n\t\t\tdo {\r\n\t\t\t\tif ((j = b[bindex + p]) !== 0) {\r\n\t\t\t\t\tv[x[j]++] = i;\r\n\t\t\t\t}\r\n\t\t\t\tp++;\r\n\t\t\t} while (++i < n);\r\n\t\t\tn = x[g]; // set n to length of v\r\n\r\n\t\t\t// Generate the Huffman codes and for each, make the table entries\r\n\t\t\tx[0] = i = 0; // first Huffman code is zero\r\n\t\t\tp = 0; // grab values in bit order\r\n\t\t\th = -1; // no tables yet--level -1\r\n\t\t\tw = -l; // bits decoded == (l * h)\r\n\t\t\tu[0] = 0; // just to keep compilers happy\r\n\t\t\tq = 0; // ditto\r\n\t\t\tz = 0; // ditto\r\n\r\n\t\t\t// go through the bit lengths (k already is bits in shortest code)\r\n\t\t\tfor (; k <= g; k++) {\r\n\t\t\t\ta = c[k];\r\n\t\t\t\twhile (a-- !== 0) {\r\n\t\t\t\t\t// here i is the Huffman code of length k bits for value *p\r\n\t\t\t\t\t// make tables up to required level\r\n\t\t\t\t\twhile (k > w + l) {\r\n\t\t\t\t\t\th++;\r\n\t\t\t\t\t\tw += l; // previous table always l bits\r\n\t\t\t\t\t\t// compute minimum size table less than or equal to l bits\r\n\t\t\t\t\t\tz = g - w;\r\n\t\t\t\t\t\tz = (z > l) ? l : z; // table size upper limit\r\n\t\t\t\t\t\tif ((f = 1 << (j = k - w)) > a + 1) { // try a k-w bit table\r\n\t\t\t\t\t\t\t// too few codes for\r\n\t\t\t\t\t\t\t// k-w bit table\r\n\t\t\t\t\t\t\tf -= a + 1; // deduct codes from patterns left\r\n\t\t\t\t\t\t\txp = k;\r\n\t\t\t\t\t\t\tif (j < z) {\r\n\t\t\t\t\t\t\t\twhile (++j < z) { // try smaller tables up to z bits\r\n\t\t\t\t\t\t\t\t\tif ((f <<= 1) <= c[++xp])\r\n\t\t\t\t\t\t\t\t\t\tbreak; // enough codes to use up j bits\r\n\t\t\t\t\t\t\t\t\tf -= c[xp]; // else deduct codes from patterns\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tz = 1 << j; // table entries for j-bit table\r\n\r\n\t\t\t\t\t\t// allocate new table\r\n\t\t\t\t\t\tif (hn[0] + z > MANY) { // (note: doesn't matter for fixed)\r\n\t\t\t\t\t\t\treturn Z_DATA_ERROR; // overflow of MANY\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tu[h] = q = /* hp+ */hn[0]; // DEBUG\r\n\t\t\t\t\t\thn[0] += z;\r\n\r\n\t\t\t\t\t\t// connect to last table, if there is one\r\n\t\t\t\t\t\tif (h !== 0) {\r\n\t\t\t\t\t\t\tx[h] = i; // save pattern for backing up\r\n\t\t\t\t\t\t\tr[0] = /* (byte) */j; // bits in this table\r\n\t\t\t\t\t\t\tr[1] = /* (byte) */l; // bits to dump before this table\r\n\t\t\t\t\t\t\tj = i >>> (w - l);\r\n\t\t\t\t\t\t\tr[2] = /* (int) */(q - u[h - 1] - j); // offset to this table\r\n\t\t\t\t\t\t\thp.set(r, (u[h - 1] + j) * 3);\r\n\t\t\t\t\t\t\t// to\r\n\t\t\t\t\t\t\t// last\r\n\t\t\t\t\t\t\t// table\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tt[0] = q; // first table is returned result\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// set up table entry in r\r\n\t\t\t\t\tr[1] = /* (byte) */(k - w);\r\n\t\t\t\t\tif (p >= n) {\r\n\t\t\t\t\t\tr[0] = 128 + 64; // out of values--invalid code\r\n\t\t\t\t\t} else if (v[p] < s) {\r\n\t\t\t\t\t\tr[0] = /* (byte) */(v[p] < 256 ? 0 : 32 + 64); // 256 is\r\n\t\t\t\t\t\t// end-of-block\r\n\t\t\t\t\t\tr[2] = v[p++]; // simple code is just the value\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tr[0] = /* (byte) */(e[v[p] - s] + 16 + 64); // non-simple--look\r\n\t\t\t\t\t\t// up in lists\r\n\t\t\t\t\t\tr[2] = d[v[p++] - s];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// fill code-like entries with r\r\n\t\t\t\t\tf = 1 << (k - w);\r\n\t\t\t\t\tfor (j = i >>> w; j < z; j += f) {\r\n\t\t\t\t\t\thp.set(r, (q + j) * 3);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// backwards increment the k-bit code i\r\n\t\t\t\t\tfor (j = 1 << (k - 1); (i & j) !== 0; j >>>= 1) {\r\n\t\t\t\t\t\ti ^= j;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti ^= j;\r\n\r\n\t\t\t\t\t// backup over finished tables\r\n\t\t\t\t\tmask = (1 << w) - 1; // needed on HP, cc -O bug\r\n\t\t\t\t\twhile ((i & mask) != x[h]) {\r\n\t\t\t\t\t\th--; // don't need to update q\r\n\t\t\t\t\t\tw -= l;\r\n\t\t\t\t\t\tmask = (1 << w) - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Return Z_BUF_ERROR if we were given an incomplete table\r\n\t\t\treturn y !== 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\r\n\t\t}\r\n\r\n\t\tfunction initWorkArea(vsize) {\r\n\t\t\tvar i;\r\n\t\t\tif (!hn) {\r\n\t\t\t\thn = []; // []; //new Array(1);\r\n\t\t\t\tv = []; // new Array(vsize);\r\n\t\t\t\tc = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\r\n\t\t\t\tr = []; // new Array(3);\r\n\t\t\t\tu = new Int32Array(BMAX); // new Array(BMAX);\r\n\t\t\t\tx = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\r\n\t\t\t}\r\n\t\t\tif (v.length < vsize) {\r\n\t\t\t\tv = []; // new Array(vsize);\r\n\t\t\t}\r\n\t\t\tfor (i = 0; i < vsize; i++) {\r\n\t\t\t\tv[i] = 0;\r\n\t\t\t}\r\n\t\t\tfor (i = 0; i < BMAX + 1; i++) {\r\n\t\t\t\tc[i] = 0;\r\n\t\t\t}\r\n\t\t\tfor (i = 0; i < 3; i++) {\r\n\t\t\t\tr[i] = 0;\r\n\t\t\t}\r\n\t\t\t// for(int i=0; i<BMAX; i++){u[i]=0;}\r\n\t\t\tu.set(c.subarray(0, BMAX), 0);\r\n\t\t\t// for(int i=0; i<BMAX+1; i++){x[i]=0;}\r\n\t\t\tx.set(c.subarray(0, BMAX + 1), 0);\r\n\t\t}\r\n\r\n\t\tthat.inflate_trees_bits = function(c, // 19 code lengths\r\n\t\tbb, // bits tree desired/actual depth\r\n\t\ttb, // bits tree result\r\n\t\thp, // space for trees\r\n\t\tz // for messages\r\n\t\t) {\r\n\t\t\tvar result;\r\n\t\t\tinitWorkArea(19);\r\n\t\t\thn[0] = 0;\r\n\t\t\tresult = huft_build(c, 0, 19, 19, null, null, tb, bb, hp, hn, v);\r\n\r\n\t\t\tif (result == Z_DATA_ERROR) {\r\n\t\t\t\tz.msg = \"oversubscribed dynamic bit lengths tree\";\r\n\t\t\t} else if (result == Z_BUF_ERROR || bb[0] === 0) {\r\n\t\t\t\tz.msg = \"incomplete dynamic bit lengths tree\";\r\n\t\t\t\tresult = Z_DATA_ERROR;\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t};\r\n\r\n\t\tthat.inflate_trees_dynamic = function(nl, // number of literal/length codes\r\n\t\tnd, // number of distance codes\r\n\t\tc, // that many (total) code lengths\r\n\t\tbl, // literal desired/actual bit depth\r\n\t\tbd, // distance desired/actual bit depth\r\n\t\ttl, // literal/length tree result\r\n\t\ttd, // distance tree result\r\n\t\thp, // space for trees\r\n\t\tz // for messages\r\n\t\t) {\r\n\t\t\tvar result;\r\n\r\n\t\t\t// build literal/length tree\r\n\t\t\tinitWorkArea(288);\r\n\t\t\thn[0] = 0;\r\n\t\t\tresult = huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, hn, v);\r\n\t\t\tif (result != Z_OK || bl[0] === 0) {\r\n\t\t\t\tif (result == Z_DATA_ERROR) {\r\n\t\t\t\t\tz.msg = \"oversubscribed literal/length tree\";\r\n\t\t\t\t} else if (result != Z_MEM_ERROR) {\r\n\t\t\t\t\tz.msg = \"incomplete literal/length tree\";\r\n\t\t\t\t\tresult = Z_DATA_ERROR;\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\r\n\t\t\t// build distance tree\r\n\t\t\tinitWorkArea(288);\r\n\t\t\tresult = huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, hn, v);\r\n\r\n\t\t\tif (result != Z_OK || (bd[0] === 0 && nl > 257)) {\r\n\t\t\t\tif (result == Z_DATA_ERROR) {\r\n\t\t\t\t\tz.msg = \"oversubscribed distance tree\";\r\n\t\t\t\t} else if (result == Z_BUF_ERROR) {\r\n\t\t\t\t\tz.msg = \"incomplete distance tree\";\r\n\t\t\t\t\tresult = Z_DATA_ERROR;\r\n\t\t\t\t} else if (result != Z_MEM_ERROR) {\r\n\t\t\t\t\tz.msg = \"empty distance tree with lengths\";\r\n\t\t\t\t\tresult = Z_DATA_ERROR;\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\r\n\t\t\treturn Z_OK;\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tInfTree.inflate_trees_fixed = function(bl, // literal desired/actual bit depth\r\n\tbd, // distance desired/actual bit depth\r\n\ttl,// literal/length tree result\r\n\ttd// distance tree result\r\n\t) {\r\n\t\tbl[0] = fixed_bl;\r\n\t\tbd[0] = fixed_bd;\r\n\t\ttl[0] = fixed_tl;\r\n\t\ttd[0] = fixed_td;\r\n\t\treturn Z_OK;\r\n\t};\r\n\r\n\t// InfCodes\r\n\r\n\t// waiting for \"i:\"=input,\r\n\t// \"o:\"=output,\r\n\t// \"x:\"=nothing\r\n\tvar START = 0; // x: set up for LEN\r\n\tvar LEN = 1; // i: get length/literal/eob next\r\n\tvar LENEXT = 2; // i: getting length extra (have base)\r\n\tvar DIST = 3; // i: get distance next\r\n\tvar DISTEXT = 4;// i: getting distance extra\r\n\tvar COPY = 5; // o: copying bytes in window, waiting\r\n\t// for space\r\n\tvar LIT = 6; // o: got literal, waiting for output\r\n\t// space\r\n\tvar WASH = 7; // o: got eob, possibly still output\r\n\t// waiting\r\n\tvar END = 8; // x: got eob and all data flushed\r\n\tvar BADCODE = 9;// x: got error\r\n\r\n\tfunction InfCodes() {\r\n\t\tvar that = this;\r\n\r\n\t\tvar mode; // current inflate_codes mode\r\n\r\n\t\t// mode dependent information\r\n\t\tvar len = 0;\r\n\r\n\t\tvar tree; // pointer into tree\r\n\t\tvar tree_index = 0;\r\n\t\tvar need = 0; // bits needed\r\n\r\n\t\tvar lit = 0;\r\n\r\n\t\t// if EXT or COPY, where and how much\r\n\t\tvar get = 0; // bits to get for extra\r\n\t\tvar dist = 0; // distance back to copy from\r\n\r\n\t\tvar lbits = 0; // ltree bits decoded per branch\r\n\t\tvar dbits = 0; // dtree bits decoder per branch\r\n\t\tvar ltree; // literal/length/eob tree\r\n\t\tvar ltree_index = 0; // literal/length/eob tree\r\n\t\tvar dtree; // distance tree\r\n\t\tvar dtree_index = 0; // distance tree\r\n\r\n\t\t// Called with number of bytes left to write in window at least 258\r\n\t\t// (the maximum string length) and number of input bytes available\r\n\t\t// at least ten. The ten bytes are six bytes for the longest length/\r\n\t\t// distance pair plus four bytes for overloading the bit buffer.\r\n\r\n\t\tfunction inflate_fast(bl, bd, tl, tl_index, td, td_index, s, z) {\r\n\t\t\tvar t; // temporary pointer\r\n\t\t\tvar tp; // temporary pointer\r\n\t\t\tvar tp_index; // temporary pointer\r\n\t\t\tvar e; // extra bits or operation\r\n\t\t\tvar b; // bit buffer\r\n\t\t\tvar k; // bits in bit buffer\r\n\t\t\tvar p; // input data pointer\r\n\t\t\tvar n; // bytes available there\r\n\t\t\tvar q; // output window write pointer\r\n\t\t\tvar m; // bytes to end of window or read pointer\r\n\t\t\tvar ml; // mask for literal/length tree\r\n\t\t\tvar md; // mask for distance tree\r\n\t\t\tvar c; // bytes to copy\r\n\t\t\tvar d; // distance back to copy from\r\n\t\t\tvar r; // copy source pointer\r\n\r\n\t\t\tvar tp_index_t_3; // (tp_index+t)*3\r\n\r\n\t\t\t// load input, output, bit values\r\n\t\t\tp = z.next_in_index;\r\n\t\t\tn = z.avail_in;\r\n\t\t\tb = s.bitb;\r\n\t\t\tk = s.bitk;\r\n\t\t\tq = s.write;\r\n\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\r\n\r\n\t\t\t// initialize masks\r\n\t\t\tml = inflate_mask[bl];\r\n\t\t\tmd = inflate_mask[bd];\r\n\r\n\t\t\t// do until not enough input or output space for fast loop\r\n\t\t\tdo { // assume called with m >= 258 && n >= 10\r\n\t\t\t\t// get literal/length code\r\n\t\t\t\twhile (k < (20)) { // max bits for literal/length code\r\n\t\t\t\t\tn--;\r\n\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\r\n\t\t\t\t\tk += 8;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tt = b & ml;\r\n\t\t\t\ttp = tl;\r\n\t\t\t\ttp_index = tl_index;\r\n\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\r\n\t\t\t\tif ((e = tp[tp_index_t_3]) === 0) {\r\n\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\r\n\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\r\n\r\n\t\t\t\t\ts.window[q++] = /* (byte) */tp[tp_index_t_3 + 2];\r\n\t\t\t\t\tm--;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tdo {\r\n\r\n\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\r\n\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\r\n\r\n\t\t\t\t\tif ((e & 16) !== 0) {\r\n\t\t\t\t\t\te &= 15;\r\n\t\t\t\t\t\tc = tp[tp_index_t_3 + 2] + (/* (int) */b & inflate_mask[e]);\r\n\r\n\t\t\t\t\t\tb >>= e;\r\n\t\t\t\t\t\tk -= e;\r\n\r\n\t\t\t\t\t\t// decode distance base of block to copy\r\n\t\t\t\t\t\twhile (k < (15)) { // max bits for distance code\r\n\t\t\t\t\t\t\tn--;\r\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\r\n\t\t\t\t\t\t\tk += 8;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tt = b & md;\r\n\t\t\t\t\t\ttp = td;\r\n\t\t\t\t\t\ttp_index = td_index;\r\n\t\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\r\n\t\t\t\t\t\te = tp[tp_index_t_3];\r\n\r\n\t\t\t\t\t\tdo {\r\n\r\n\t\t\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\r\n\t\t\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\r\n\r\n\t\t\t\t\t\t\tif ((e & 16) !== 0) {\r\n\t\t\t\t\t\t\t\t// get extra bits to add to distance base\r\n\t\t\t\t\t\t\t\te &= 15;\r\n\t\t\t\t\t\t\t\twhile (k < (e)) { // get extra bits (up to 13)\r\n\t\t\t\t\t\t\t\t\tn--;\r\n\t\t\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\r\n\t\t\t\t\t\t\t\t\tk += 8;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\td = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);\r\n\r\n\t\t\t\t\t\t\t\tb >>= (e);\r\n\t\t\t\t\t\t\t\tk -= (e);\r\n\r\n\t\t\t\t\t\t\t\t// do the copy\r\n\t\t\t\t\t\t\t\tm -= c;\r\n\t\t\t\t\t\t\t\tif (q >= d) { // offset before dest\r\n\t\t\t\t\t\t\t\t\t// just copy\r\n\t\t\t\t\t\t\t\t\tr = q - d;\r\n\t\t\t\t\t\t\t\t\tif (q - r > 0 && 2 > (q - r)) {\r\n\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++]; // minimum\r\n\t\t\t\t\t\t\t\t\t\t// count is\r\n\t\t\t\t\t\t\t\t\t\t// three,\r\n\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++]; // so unroll\r\n\t\t\t\t\t\t\t\t\t\t// loop a\r\n\t\t\t\t\t\t\t\t\t\t// little\r\n\t\t\t\t\t\t\t\t\t\tc -= 2;\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\ts.window.set(s.window.subarray(r, r + 2), q);\r\n\t\t\t\t\t\t\t\t\t\tq += 2;\r\n\t\t\t\t\t\t\t\t\t\tr += 2;\r\n\t\t\t\t\t\t\t\t\t\tc -= 2;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else { // else offset after destination\r\n\t\t\t\t\t\t\t\t\tr = q - d;\r\n\t\t\t\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\t\t\t\tr += s.end; // force pointer in window\r\n\t\t\t\t\t\t\t\t\t} while (r < 0); // covers invalid distances\r\n\t\t\t\t\t\t\t\t\te = s.end - r;\r\n\t\t\t\t\t\t\t\t\tif (c > e) { // if source crosses,\r\n\t\t\t\t\t\t\t\t\t\tc -= e; // wrapped copy\r\n\t\t\t\t\t\t\t\t\t\tif (q - r > 0 && e > (q - r)) {\r\n\t\t\t\t\t\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++];\r\n\t\t\t\t\t\t\t\t\t\t\t} while (--e !== 0);\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\ts.window.set(s.window.subarray(r, r + e), q);\r\n\t\t\t\t\t\t\t\t\t\t\tq += e;\r\n\t\t\t\t\t\t\t\t\t\t\tr += e;\r\n\t\t\t\t\t\t\t\t\t\t\te = 0;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tr = 0; // copy rest from start of window\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy all or what's left\r\n\t\t\t\t\t\t\t\tif (q - r > 0 && c > (q - r)) {\r\n\t\t\t\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++];\r\n\t\t\t\t\t\t\t\t\t} while (--c !== 0);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\ts.window.set(s.window.subarray(r, r + c), q);\r\n\t\t\t\t\t\t\t\t\tq += c;\r\n\t\t\t\t\t\t\t\t\tr += c;\r\n\t\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t} else if ((e & 64) === 0) {\r\n\t\t\t\t\t\t\t\tt += tp[tp_index_t_3 + 2];\r\n\t\t\t\t\t\t\t\tt += (b & inflate_mask[e]);\r\n\t\t\t\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\r\n\t\t\t\t\t\t\t\te = tp[tp_index_t_3];\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tz.msg = \"invalid distance code\";\r\n\r\n\t\t\t\t\t\t\t\tc = z.avail_in - n;\r\n\t\t\t\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\r\n\t\t\t\t\t\t\t\tn += c;\r\n\t\t\t\t\t\t\t\tp -= c;\r\n\t\t\t\t\t\t\t\tk -= c << 3;\r\n\r\n\t\t\t\t\t\t\t\ts.bitb = b;\r\n\t\t\t\t\t\t\t\ts.bitk = k;\r\n\t\t\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\t\t\ts.write = q;\r\n\r\n\t\t\t\t\t\t\t\treturn Z_DATA_ERROR;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} while (true);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ((e & 64) === 0) {\r\n\t\t\t\t\t\tt += tp[tp_index_t_3 + 2];\r\n\t\t\t\t\t\tt += (b & inflate_mask[e]);\r\n\t\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\r\n\t\t\t\t\t\tif ((e = tp[tp_index_t_3]) === 0) {\r\n\r\n\t\t\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\r\n\t\t\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\r\n\r\n\t\t\t\t\t\t\ts.window[q++] = /* (byte) */tp[tp_index_t_3 + 2];\r\n\t\t\t\t\t\t\tm--;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if ((e & 32) !== 0) {\r\n\r\n\t\t\t\t\t\tc = z.avail_in - n;\r\n\t\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\r\n\t\t\t\t\t\tn += c;\r\n\t\t\t\t\t\tp -= c;\r\n\t\t\t\t\t\tk -= c << 3;\r\n\r\n\t\t\t\t\t\ts.bitb = b;\r\n\t\t\t\t\t\ts.bitk = k;\r\n\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\ts.write = q;\r\n\r\n\t\t\t\t\t\treturn Z_STREAM_END;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tz.msg = \"invalid literal/length code\";\r\n\r\n\t\t\t\t\t\tc = z.avail_in - n;\r\n\t\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\r\n\t\t\t\t\t\tn += c;\r\n\t\t\t\t\t\tp -= c;\r\n\t\t\t\t\t\tk -= c << 3;\r\n\r\n\t\t\t\t\t\ts.bitb = b;\r\n\t\t\t\t\t\ts.bitk = k;\r\n\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\ts.write = q;\r\n\r\n\t\t\t\t\t\treturn Z_DATA_ERROR;\r\n\t\t\t\t\t}\r\n\t\t\t\t} while (true);\r\n\t\t\t} while (m >= 258 && n >= 10);\r\n\r\n\t\t\t// not enough input or output--restore pointers and return\r\n\t\t\tc = z.avail_in - n;\r\n\t\t\tc = (k >> 3) < c ? k >> 3 : c;\r\n\t\t\tn += c;\r\n\t\t\tp -= c;\r\n\t\t\tk -= c << 3;\r\n\r\n\t\t\ts.bitb = b;\r\n\t\t\ts.bitk = k;\r\n\t\t\tz.avail_in = n;\r\n\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\tz.next_in_index = p;\r\n\t\t\ts.write = q;\r\n\r\n\t\t\treturn Z_OK;\r\n\t\t}\r\n\r\n\t\tthat.init = function(bl, bd, tl, tl_index, td, td_index) {\r\n\t\t\tmode = START;\r\n\t\t\tlbits = /* (byte) */bl;\r\n\t\t\tdbits = /* (byte) */bd;\r\n\t\t\tltree = tl;\r\n\t\t\tltree_index = tl_index;\r\n\t\t\tdtree = td;\r\n\t\t\tdtree_index = td_index;\r\n\t\t\ttree = null;\r\n\t\t};\r\n\r\n\t\tthat.proc = function(s, z, r) {\r\n\t\t\tvar j; // temporary storage\r\n\t\t\tvar tindex; // temporary pointer\r\n\t\t\tvar e; // extra bits or operation\r\n\t\t\tvar b = 0; // bit buffer\r\n\t\t\tvar k = 0; // bits in bit buffer\r\n\t\t\tvar p = 0; // input data pointer\r\n\t\t\tvar n; // bytes available there\r\n\t\t\tvar q; // output window write pointer\r\n\t\t\tvar m; // bytes to end of window or read pointer\r\n\t\t\tvar f; // pointer to copy strings from\r\n\r\n\t\t\t// copy input/output information to locals (UPDATE macro restores)\r\n\t\t\tp = z.next_in_index;\r\n\t\t\tn = z.avail_in;\r\n\t\t\tb = s.bitb;\r\n\t\t\tk = s.bitk;\r\n\t\t\tq = s.write;\r\n\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\r\n\r\n\t\t\t// process input and output based on current state\r\n\t\t\twhile (true) {\r\n\t\t\t\tswitch (mode) {\r\n\t\t\t\t// waiting for \"i:\"=input, \"o:\"=output, \"x:\"=nothing\r\n\t\t\t\tcase START: // x: set up for LEN\r\n\t\t\t\t\tif (m >= 258 && n >= 10) {\r\n\r\n\t\t\t\t\t\ts.bitb = b;\r\n\t\t\t\t\t\ts.bitk = k;\r\n\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\ts.write = q;\r\n\t\t\t\t\t\tr = inflate_fast(lbits, dbits, ltree, ltree_index, dtree, dtree_index, s, z);\r\n\r\n\t\t\t\t\t\tp = z.next_in_index;\r\n\t\t\t\t\t\tn = z.avail_in;\r\n\t\t\t\t\t\tb = s.bitb;\r\n\t\t\t\t\t\tk = s.bitk;\r\n\t\t\t\t\t\tq = s.write;\r\n\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\r\n\r\n\t\t\t\t\t\tif (r != Z_OK) {\r\n\t\t\t\t\t\t\tmode = r == Z_STREAM_END ? WASH : BADCODE;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tneed = lbits;\r\n\t\t\t\t\ttree = ltree;\r\n\t\t\t\t\ttree_index = ltree_index;\r\n\r\n\t\t\t\t\tmode = LEN;\r\n\t\t\t\t\t/* falls through */\r\n\t\t\t\tcase LEN: // i: get length/literal/eob next\r\n\t\t\t\t\tj = need;\r\n\r\n\t\t\t\t\twhile (k < (j)) {\r\n\t\t\t\t\t\tif (n !== 0)\r\n\t\t\t\t\t\t\tr = Z_OK;\r\n\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\ts.bitb = b;\r\n\t\t\t\t\t\t\ts.bitk = k;\r\n\t\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\t\ts.write = q;\r\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tn--;\r\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\r\n\t\t\t\t\t\tk += 8;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttindex = (tree_index + (b & inflate_mask[j])) * 3;\r\n\r\n\t\t\t\t\tb >>>= (tree[tindex + 1]);\r\n\t\t\t\t\tk -= (tree[tindex + 1]);\r\n\r\n\t\t\t\t\te = tree[tindex];\r\n\r\n\t\t\t\t\tif (e === 0) { // literal\r\n\t\t\t\t\t\tlit = tree[tindex + 2];\r\n\t\t\t\t\t\tmode = LIT;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ((e & 16) !== 0) { // length\r\n\t\t\t\t\t\tget = e & 15;\r\n\t\t\t\t\t\tlen = tree[tindex + 2];\r\n\t\t\t\t\t\tmode = LENEXT;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ((e & 64) === 0) { // next table\r\n\t\t\t\t\t\tneed = e;\r\n\t\t\t\t\t\ttree_index = tindex / 3 + tree[tindex + 2];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ((e & 32) !== 0) { // end of block\r\n\t\t\t\t\t\tmode = WASH;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmode = BADCODE; // invalid code\r\n\t\t\t\t\tz.msg = \"invalid literal/length code\";\r\n\t\t\t\t\tr = Z_DATA_ERROR;\r\n\r\n\t\t\t\t\ts.bitb = b;\r\n\t\t\t\t\ts.bitk = k;\r\n\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\ts.write = q;\r\n\t\t\t\t\treturn s.inflate_flush(z, r);\r\n\r\n\t\t\t\tcase LENEXT: // i: getting length extra (have base)\r\n\t\t\t\t\tj = get;\r\n\r\n\t\t\t\t\twhile (k < (j)) {\r\n\t\t\t\t\t\tif (n !== 0)\r\n\t\t\t\t\t\t\tr = Z_OK;\r\n\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\ts.bitb = b;\r\n\t\t\t\t\t\t\ts.bitk = k;\r\n\t\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\t\ts.write = q;\r\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tn--;\r\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\r\n\t\t\t\t\t\tk += 8;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlen += (b & inflate_mask[j]);\r\n\r\n\t\t\t\t\tb >>= j;\r\n\t\t\t\t\tk -= j;\r\n\r\n\t\t\t\t\tneed = dbits;\r\n\t\t\t\t\ttree = dtree;\r\n\t\t\t\t\ttree_index = dtree_index;\r\n\t\t\t\t\tmode = DIST;\r\n\t\t\t\t\t/* falls through */\r\n\t\t\t\tcase DIST: // i: get distance next\r\n\t\t\t\t\tj = need;\r\n\r\n\t\t\t\t\twhile (k < (j)) {\r\n\t\t\t\t\t\tif (n !== 0)\r\n\t\t\t\t\t\t\tr = Z_OK;\r\n\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\ts.bitb = b;\r\n\t\t\t\t\t\t\ts.bitk = k;\r\n\t\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\t\ts.write = q;\r\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tn--;\r\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\r\n\t\t\t\t\t\tk += 8;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttindex = (tree_index + (b & inflate_mask[j])) * 3;\r\n\r\n\t\t\t\t\tb >>= tree[tindex + 1];\r\n\t\t\t\t\tk -= tree[tindex + 1];\r\n\r\n\t\t\t\t\te = (tree[tindex]);\r\n\t\t\t\t\tif ((e & 16) !== 0) { // distance\r\n\t\t\t\t\t\tget = e & 15;\r\n\t\t\t\t\t\tdist = tree[tindex + 2];\r\n\t\t\t\t\t\tmode = DISTEXT;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ((e & 64) === 0) { // next table\r\n\t\t\t\t\t\tneed = e;\r\n\t\t\t\t\t\ttree_index = tindex / 3 + tree[tindex + 2];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmode = BADCODE; // invalid code\r\n\t\t\t\t\tz.msg = \"invalid distance code\";\r\n\t\t\t\t\tr = Z_DATA_ERROR;\r\n\r\n\t\t\t\t\ts.bitb = b;\r\n\t\t\t\t\ts.bitk = k;\r\n\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\ts.write = q;\r\n\t\t\t\t\treturn s.inflate_flush(z, r);\r\n\r\n\t\t\t\tcase DISTEXT: // i: getting distance extra\r\n\t\t\t\t\tj = get;\r\n\r\n\t\t\t\t\twhile (k < (j)) {\r\n\t\t\t\t\t\tif (n !== 0)\r\n\t\t\t\t\t\t\tr = Z_OK;\r\n\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\ts.bitb = b;\r\n\t\t\t\t\t\t\ts.bitk = k;\r\n\t\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\t\ts.write = q;\r\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tn--;\r\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\r\n\t\t\t\t\t\tk += 8;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdist += (b & inflate_mask[j]);\r\n\r\n\t\t\t\t\tb >>= j;\r\n\t\t\t\t\tk -= j;\r\n\r\n\t\t\t\t\tmode = COPY;\r\n\t\t\t\t\t/* falls through */\r\n\t\t\t\tcase COPY: // o: copying bytes in window, waiting for space\r\n\t\t\t\t\tf = q - dist;\r\n\t\t\t\t\twhile (f < 0) { // modulo window size-\"while\" instead\r\n\t\t\t\t\t\tf += s.end; // of \"if\" handles invalid distances\r\n\t\t\t\t\t}\r\n\t\t\t\t\twhile (len !== 0) {\r\n\r\n\t\t\t\t\t\tif (m === 0) {\r\n\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\r\n\t\t\t\t\t\t\t\tq = 0;\r\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (m === 0) {\r\n\t\t\t\t\t\t\t\ts.write = q;\r\n\t\t\t\t\t\t\t\tr = s.inflate_flush(z, r);\r\n\t\t\t\t\t\t\t\tq = s.write;\r\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\r\n\r\n\t\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\r\n\t\t\t\t\t\t\t\t\tq = 0;\r\n\t\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (m === 0) {\r\n\t\t\t\t\t\t\t\t\ts.bitb = b;\r\n\t\t\t\t\t\t\t\t\ts.bitk = k;\r\n\t\t\t\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\t\t\t\ts.write = q;\r\n\t\t\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ts.window[q++] = s.window[f++];\r\n\t\t\t\t\t\tm--;\r\n\r\n\t\t\t\t\t\tif (f == s.end)\r\n\t\t\t\t\t\t\tf = 0;\r\n\t\t\t\t\t\tlen--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmode = START;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase LIT: // o: got literal, waiting for output space\r\n\t\t\t\t\tif (m === 0) {\r\n\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\r\n\t\t\t\t\t\t\tq = 0;\r\n\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (m === 0) {\r\n\t\t\t\t\t\t\ts.write = q;\r\n\t\t\t\t\t\t\tr = s.inflate_flush(z, r);\r\n\t\t\t\t\t\t\tq = s.write;\r\n\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\r\n\r\n\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\r\n\t\t\t\t\t\t\t\tq = 0;\r\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (m === 0) {\r\n\t\t\t\t\t\t\t\ts.bitb = b;\r\n\t\t\t\t\t\t\t\ts.bitk = k;\r\n\t\t\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\t\t\ts.write = q;\r\n\t\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tr = Z_OK;\r\n\r\n\t\t\t\t\ts.window[q++] = /* (byte) */lit;\r\n\t\t\t\t\tm--;\r\n\r\n\t\t\t\t\tmode = START;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase WASH: // o: got eob, possibly more output\r\n\t\t\t\t\tif (k > 7) { // return unused byte, if any\r\n\t\t\t\t\t\tk -= 8;\r\n\t\t\t\t\t\tn++;\r\n\t\t\t\t\t\tp--; // can always return one\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ts.write = q;\r\n\t\t\t\t\tr = s.inflate_flush(z, r);\r\n\t\t\t\t\tq = s.write;\r\n\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\r\n\r\n\t\t\t\t\tif (s.read != s.write) {\r\n\t\t\t\t\t\ts.bitb = b;\r\n\t\t\t\t\t\ts.bitk = k;\r\n\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\ts.write = q;\r\n\t\t\t\t\t\treturn s.inflate_flush(z, r);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmode = END;\r\n\t\t\t\t\t/* falls through */\r\n\t\t\t\tcase END:\r\n\t\t\t\t\tr = Z_STREAM_END;\r\n\t\t\t\t\ts.bitb = b;\r\n\t\t\t\t\ts.bitk = k;\r\n\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\ts.write = q;\r\n\t\t\t\t\treturn s.inflate_flush(z, r);\r\n\r\n\t\t\t\tcase BADCODE: // x: got error\r\n\r\n\t\t\t\t\tr = Z_DATA_ERROR;\r\n\r\n\t\t\t\t\ts.bitb = b;\r\n\t\t\t\t\ts.bitk = k;\r\n\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\ts.write = q;\r\n\t\t\t\t\treturn s.inflate_flush(z, r);\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tr = Z_STREAM_ERROR;\r\n\r\n\t\t\t\t\ts.bitb = b;\r\n\t\t\t\t\ts.bitk = k;\r\n\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\ts.write = q;\r\n\t\t\t\t\treturn s.inflate_flush(z, r);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthat.free = function() {\r\n\t\t\t// ZFREE(z, c);\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t// InfBlocks\r\n\r\n\t// Table for deflate from PKZIP's appnote.txt.\r\n\tvar border = [ // Order of the bit length code lengths\r\n\t16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\r\n\r\n\tvar TYPE = 0; // get type bits (3, including end bit)\r\n\tvar LENS = 1; // get lengths for stored\r\n\tvar STORED = 2;// processing stored block\r\n\tvar TABLE = 3; // get table lengths\r\n\tvar BTREE = 4; // get bit lengths tree for a dynamic\r\n\t// block\r\n\tvar DTREE = 5; // get length, distance trees for a\r\n\t// dynamic block\r\n\tvar CODES = 6; // processing fixed or dynamic block\r\n\tvar DRY = 7; // output remaining window bytes\r\n\tvar DONELOCKS = 8; // finished last block, done\r\n\tvar BADBLOCKS = 9; // ot a data error--stuck here\r\n\r\n\tfunction InfBlocks(z, w) {\r\n\t\tvar that = this;\r\n\r\n\t\tvar mode = TYPE; // current inflate_block mode\r\n\r\n\t\tvar left = 0; // if STORED, bytes left to copy\r\n\r\n\t\tvar table = 0; // table lengths (14 bits)\r\n\t\tvar index = 0; // index into blens (or border)\r\n\t\tvar blens; // bit lengths of codes\r\n\t\tvar bb = [ 0 ]; // bit length tree depth\r\n\t\tvar tb = [ 0 ]; // bit length decoding tree\r\n\r\n\t\tvar codes = new InfCodes(); // if CODES, current state\r\n\r\n\t\tvar last = 0; // true if this block is the last block\r\n\r\n\t\tvar hufts = new Int32Array(MANY * 3); // single malloc for tree space\r\n\t\tvar check = 0; // check on output\r\n\t\tvar inftree = new InfTree();\r\n\r\n\t\tthat.bitk = 0; // bits in bit buffer\r\n\t\tthat.bitb = 0; // bit buffer\r\n\t\tthat.window = new Uint8Array(w); // sliding window\r\n\t\tthat.end = w; // one byte after sliding window\r\n\t\tthat.read = 0; // window read pointer\r\n\t\tthat.write = 0; // window write pointer\r\n\r\n\t\tthat.reset = function(z, c) {\r\n\t\t\tif (c)\r\n\t\t\t\tc[0] = check;\r\n\t\t\t// if (mode == BTREE || mode == DTREE) {\r\n\t\t\t// }\r\n\t\t\tif (mode == CODES) {\r\n\t\t\t\tcodes.free(z);\r\n\t\t\t}\r\n\t\t\tmode = TYPE;\r\n\t\t\tthat.bitk = 0;\r\n\t\t\tthat.bitb = 0;\r\n\t\t\tthat.read = that.write = 0;\r\n\t\t};\r\n\r\n\t\tthat.reset(z, null);\r\n\r\n\t\t// copy as much as possible from the sliding window to the output area\r\n\t\tthat.inflate_flush = function(z, r) {\r\n\t\t\tvar n;\r\n\t\t\tvar p;\r\n\t\t\tvar q;\r\n\r\n\t\t\t// local copies of source and destination pointers\r\n\t\t\tp = z.next_out_index;\r\n\t\t\tq = that.read;\r\n\r\n\t\t\t// compute number of bytes to copy as far as end of window\r\n\t\t\tn = /* (int) */((q <= that.write ? that.write : that.end) - q);\r\n\t\t\tif (n > z.avail_out)\r\n\t\t\t\tn = z.avail_out;\r\n\t\t\tif (n !== 0 && r == Z_BUF_ERROR)\r\n\t\t\t\tr = Z_OK;\r\n\r\n\t\t\t// update counters\r\n\t\t\tz.avail_out -= n;\r\n\t\t\tz.total_out += n;\r\n\r\n\t\t\t// copy as far as end of window\r\n\t\t\tz.next_out.set(that.window.subarray(q, q + n), p);\r\n\t\t\tp += n;\r\n\t\t\tq += n;\r\n\r\n\t\t\t// see if more to copy at beginning of window\r\n\t\t\tif (q == that.end) {\r\n\t\t\t\t// wrap pointers\r\n\t\t\t\tq = 0;\r\n\t\t\t\tif (that.write == that.end)\r\n\t\t\t\t\tthat.write = 0;\r\n\r\n\t\t\t\t// compute bytes to copy\r\n\t\t\t\tn = that.write - q;\r\n\t\t\t\tif (n > z.avail_out)\r\n\t\t\t\t\tn = z.avail_out;\r\n\t\t\t\tif (n !== 0 && r == Z_BUF_ERROR)\r\n\t\t\t\t\tr = Z_OK;\r\n\r\n\t\t\t\t// update counters\r\n\t\t\t\tz.avail_out -= n;\r\n\t\t\t\tz.total_out += n;\r\n\r\n\t\t\t\t// copy\r\n\t\t\t\tz.next_out.set(that.window.subarray(q, q + n), p);\r\n\t\t\t\tp += n;\r\n\t\t\t\tq += n;\r\n\t\t\t}\r\n\r\n\t\t\t// update pointers\r\n\t\t\tz.next_out_index = p;\r\n\t\t\tthat.read = q;\r\n\r\n\t\t\t// done\r\n\t\t\treturn r;\r\n\t\t};\r\n\r\n\t\tthat.proc = function(z, r) {\r\n\t\t\tvar t; // temporary storage\r\n\t\t\tvar b; // bit buffer\r\n\t\t\tvar k; // bits in bit buffer\r\n\t\t\tvar p; // input data pointer\r\n\t\t\tvar n; // bytes available there\r\n\t\t\tvar q; // output window write pointer\r\n\t\t\tvar m; // bytes to end of window or read pointer\r\n\r\n\t\t\tvar i;\r\n\r\n\t\t\t// copy input/output information to locals (UPDATE macro restores)\r\n\t\t\t// {\r\n\t\t\tp = z.next_in_index;\r\n\t\t\tn = z.avail_in;\r\n\t\t\tb = that.bitb;\r\n\t\t\tk = that.bitk;\r\n\t\t\t// }\r\n\t\t\t// {\r\n\t\t\tq = that.write;\r\n\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\r\n\t\t\t// }\r\n\r\n\t\t\t// process input based on current state\r\n\t\t\t// DEBUG dtree\r\n\t\t\twhile (true) {\r\n\t\t\t\tswitch (mode) {\r\n\t\t\t\tcase TYPE:\r\n\r\n\t\t\t\t\twhile (k < (3)) {\r\n\t\t\t\t\t\tif (n !== 0) {\r\n\t\t\t\t\t\t\tr = Z_OK;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tn--;\r\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\r\n\t\t\t\t\t\tk += 8;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt = /* (int) */(b & 7);\r\n\t\t\t\t\tlast = t & 1;\r\n\r\n\t\t\t\t\tswitch (t >>> 1) {\r\n\t\t\t\t\tcase 0: // stored\r\n\t\t\t\t\t\t// {\r\n\t\t\t\t\t\tb >>>= (3);\r\n\t\t\t\t\t\tk -= (3);\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\tt = k & 7; // go to byte boundary\r\n\r\n\t\t\t\t\t\t// {\r\n\t\t\t\t\t\tb >>>= (t);\r\n\t\t\t\t\t\tk -= (t);\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\tmode = LENS; // get length of stored block\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1: // fixed\r\n\t\t\t\t\t\t// {\r\n\t\t\t\t\t\tvar bl = []; // new Array(1);\r\n\t\t\t\t\t\tvar bd = []; // new Array(1);\r\n\t\t\t\t\t\tvar tl = [ [] ]; // new Array(1);\r\n\t\t\t\t\t\tvar td = [ [] ]; // new Array(1);\r\n\r\n\t\t\t\t\t\tInfTree.inflate_trees_fixed(bl, bd, tl, td);\r\n\t\t\t\t\t\tcodes.init(bl[0], bd[0], tl[0], 0, td[0], 0);\r\n\t\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t\t// {\r\n\t\t\t\t\t\tb >>>= (3);\r\n\t\t\t\t\t\tk -= (3);\r\n\t\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t\tmode = CODES;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2: // dynamic\r\n\r\n\t\t\t\t\t\t// {\r\n\t\t\t\t\t\tb >>>= (3);\r\n\t\t\t\t\t\tk -= (3);\r\n\t\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t\tmode = TABLE;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3: // illegal\r\n\r\n\t\t\t\t\t\t// {\r\n\t\t\t\t\t\tb >>>= (3);\r\n\t\t\t\t\t\tk -= (3);\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\tmode = BADBLOCKS;\r\n\t\t\t\t\t\tz.msg = \"invalid block type\";\r\n\t\t\t\t\t\tr = Z_DATA_ERROR;\r\n\r\n\t\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase LENS:\r\n\r\n\t\t\t\t\twhile (k < (32)) {\r\n\t\t\t\t\t\tif (n !== 0) {\r\n\t\t\t\t\t\t\tr = Z_OK;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tn--;\r\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\r\n\t\t\t\t\t\tk += 8;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ((((~b) >>> 16) & 0xffff) != (b & 0xffff)) {\r\n\t\t\t\t\t\tmode = BADBLOCKS;\r\n\t\t\t\t\t\tz.msg = \"invalid stored block lengths\";\r\n\t\t\t\t\t\tr = Z_DATA_ERROR;\r\n\r\n\t\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tleft = (b & 0xffff);\r\n\t\t\t\t\tb = k = 0; // dump bits\r\n\t\t\t\t\tmode = left !== 0 ? STORED : (last !== 0 ? DRY : TYPE);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase STORED:\r\n\t\t\t\t\tif (n === 0) {\r\n\t\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (m === 0) {\r\n\t\t\t\t\t\tif (q == that.end && that.read !== 0) {\r\n\t\t\t\t\t\t\tq = 0;\r\n\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (m === 0) {\r\n\t\t\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\t\t\tr = that.inflate_flush(z, r);\r\n\t\t\t\t\t\t\tq = that.write;\r\n\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\r\n\t\t\t\t\t\t\tif (q == that.end && that.read !== 0) {\r\n\t\t\t\t\t\t\t\tq = 0;\r\n\t\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (m === 0) {\r\n\t\t\t\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tr = Z_OK;\r\n\r\n\t\t\t\t\tt = left;\r\n\t\t\t\t\tif (t > n)\r\n\t\t\t\t\t\tt = n;\r\n\t\t\t\t\tif (t > m)\r\n\t\t\t\t\t\tt = m;\r\n\t\t\t\t\tthat.window.set(z.read_buf(p, t), q);\r\n\t\t\t\t\tp += t;\r\n\t\t\t\t\tn -= t;\r\n\t\t\t\t\tq += t;\r\n\t\t\t\t\tm -= t;\r\n\t\t\t\t\tif ((left -= t) !== 0)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tmode = last !== 0 ? DRY : TYPE;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase TABLE:\r\n\r\n\t\t\t\t\twhile (k < (14)) {\r\n\t\t\t\t\t\tif (n !== 0) {\r\n\t\t\t\t\t\t\tr = Z_OK;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tn--;\r\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\r\n\t\t\t\t\t\tk += 8;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttable = t = (b & 0x3fff);\r\n\t\t\t\t\tif ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {\r\n\t\t\t\t\t\tmode = BADBLOCKS;\r\n\t\t\t\t\t\tz.msg = \"too many length or distance symbols\";\r\n\t\t\t\t\t\tr = Z_DATA_ERROR;\r\n\r\n\t\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);\r\n\t\t\t\t\tif (!blens || blens.length < t) {\r\n\t\t\t\t\t\tblens = []; // new Array(t);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfor (i = 0; i < t; i++) {\r\n\t\t\t\t\t\t\tblens[i] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// {\r\n\t\t\t\t\tb >>>= (14);\r\n\t\t\t\t\tk -= (14);\r\n\t\t\t\t\t// }\r\n\r\n\t\t\t\t\tindex = 0;\r\n\t\t\t\t\tmode = BTREE;\r\n\t\t\t\t\t/* falls through */\r\n\t\t\t\tcase BTREE:\r\n\t\t\t\t\twhile (index < 4 + (table >>> 10)) {\r\n\t\t\t\t\t\twhile (k < (3)) {\r\n\t\t\t\t\t\t\tif (n !== 0) {\r\n\t\t\t\t\t\t\t\tr = Z_OK;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tn--;\r\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\r\n\t\t\t\t\t\t\tk += 8;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tblens[border[index++]] = b & 7;\r\n\r\n\t\t\t\t\t\t// {\r\n\t\t\t\t\t\tb >>>= (3);\r\n\t\t\t\t\t\tk -= (3);\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\twhile (index < 19) {\r\n\t\t\t\t\t\tblens[border[index++]] = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbb[0] = 7;\r\n\t\t\t\t\tt = inftree.inflate_trees_bits(blens, bb, tb, hufts, z);\r\n\t\t\t\t\tif (t != Z_OK) {\r\n\t\t\t\t\t\tr = t;\r\n\t\t\t\t\t\tif (r == Z_DATA_ERROR) {\r\n\t\t\t\t\t\t\tblens = null;\r\n\t\t\t\t\t\t\tmode = BADBLOCKS;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tindex = 0;\r\n\t\t\t\t\tmode = DTREE;\r\n\t\t\t\t\t/* falls through */\r\n\t\t\t\tcase DTREE:\r\n\t\t\t\t\twhile (true) {\r\n\t\t\t\t\t\tt = table;\r\n\t\t\t\t\t\tif (index >= 258 + (t & 0x1f) + ((t >> 5) & 0x1f)) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar j, c;\r\n\r\n\t\t\t\t\t\tt = bb[0];\r\n\r\n\t\t\t\t\t\twhile (k < (t)) {\r\n\t\t\t\t\t\t\tif (n !== 0) {\r\n\t\t\t\t\t\t\t\tr = Z_OK;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tn--;\r\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\r\n\t\t\t\t\t\t\tk += 8;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// if (tb[0] == -1) {\r\n\t\t\t\t\t\t// System.err.println(\"null...\");\r\n\t\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t\tt = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 1];\r\n\t\t\t\t\t\tc = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 2];\r\n\r\n\t\t\t\t\t\tif (c < 16) {\r\n\t\t\t\t\t\t\tb >>>= (t);\r\n\t\t\t\t\t\t\tk -= (t);\r\n\t\t\t\t\t\t\tblens[index++] = c;\r\n\t\t\t\t\t\t} else { // c == 16..18\r\n\t\t\t\t\t\t\ti = c == 18 ? 7 : c - 14;\r\n\t\t\t\t\t\t\tj = c == 18 ? 11 : 3;\r\n\r\n\t\t\t\t\t\t\twhile (k < (t + i)) {\r\n\t\t\t\t\t\t\t\tif (n !== 0) {\r\n\t\t\t\t\t\t\t\t\tr = Z_OK;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tn--;\r\n\t\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\r\n\t\t\t\t\t\t\t\tk += 8;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tb >>>= (t);\r\n\t\t\t\t\t\t\tk -= (t);\r\n\r\n\t\t\t\t\t\t\tj += (b & inflate_mask[i]);\r\n\r\n\t\t\t\t\t\t\tb >>>= (i);\r\n\t\t\t\t\t\t\tk -= (i);\r\n\r\n\t\t\t\t\t\t\ti = index;\r\n\t\t\t\t\t\t\tt = table;\r\n\t\t\t\t\t\t\tif (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {\r\n\t\t\t\t\t\t\t\tblens = null;\r\n\t\t\t\t\t\t\t\tmode = BADBLOCKS;\r\n\t\t\t\t\t\t\t\tz.msg = \"invalid bit length repeat\";\r\n\t\t\t\t\t\t\t\tr = Z_DATA_ERROR;\r\n\r\n\t\t\t\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tc = c == 16 ? blens[i - 1] : 0;\r\n\t\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\t\tblens[i++] = c;\r\n\t\t\t\t\t\t\t} while (--j !== 0);\r\n\t\t\t\t\t\t\tindex = i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttb[0] = -1;\r\n\t\t\t\t\t// {\r\n\t\t\t\t\tvar bl_ = []; // new Array(1);\r\n\t\t\t\t\tvar bd_ = []; // new Array(1);\r\n\t\t\t\t\tvar tl_ = []; // new Array(1);\r\n\t\t\t\t\tvar td_ = []; // new Array(1);\r\n\t\t\t\t\tbl_[0] = 9; // must be <= 9 for lookahead assumptions\r\n\t\t\t\t\tbd_[0] = 6; // must be <= 9 for lookahead assumptions\r\n\r\n\t\t\t\t\tt = table;\r\n\t\t\t\t\tt = inftree.inflate_trees_dynamic(257 + (t & 0x1f), 1 + ((t >> 5) & 0x1f), blens, bl_, bd_, tl_, td_, hufts, z);\r\n\r\n\t\t\t\t\tif (t != Z_OK) {\r\n\t\t\t\t\t\tif (t == Z_DATA_ERROR) {\r\n\t\t\t\t\t\t\tblens = null;\r\n\t\t\t\t\t\t\tmode = BADBLOCKS;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tr = t;\r\n\r\n\t\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcodes.init(bl_[0], bd_[0], hufts, tl_[0], hufts, td_[0]);\r\n\t\t\t\t\t// }\r\n\t\t\t\t\tmode = CODES;\r\n\t\t\t\t\t/* falls through */\r\n\t\t\t\tcase CODES:\r\n\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\tthat.write = q;\r\n\r\n\t\t\t\t\tif ((r = codes.proc(that, z, r)) != Z_STREAM_END) {\r\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tr = Z_OK;\r\n\t\t\t\t\tcodes.free(z);\r\n\r\n\t\t\t\t\tp = z.next_in_index;\r\n\t\t\t\t\tn = z.avail_in;\r\n\t\t\t\t\tb = that.bitb;\r\n\t\t\t\t\tk = that.bitk;\r\n\t\t\t\t\tq = that.write;\r\n\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\r\n\r\n\t\t\t\t\tif (last === 0) {\r\n\t\t\t\t\t\tmode = TYPE;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmode = DRY;\r\n\t\t\t\t\t/* falls through */\r\n\t\t\t\tcase DRY:\r\n\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\tr = that.inflate_flush(z, r);\r\n\t\t\t\t\tq = that.write;\r\n\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\r\n\t\t\t\t\tif (that.read != that.write) {\r\n\t\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmode = DONELOCKS;\r\n\t\t\t\t\t/* falls through */\r\n\t\t\t\tcase DONELOCKS:\r\n\t\t\t\t\tr = Z_STREAM_END;\r\n\r\n\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\tcase BADBLOCKS:\r\n\t\t\t\t\tr = Z_DATA_ERROR;\r\n\r\n\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tr = Z_STREAM_ERROR;\r\n\r\n\t\t\t\t\tthat.bitb = b;\r\n\t\t\t\t\tthat.bitk = k;\r\n\t\t\t\t\tz.avail_in = n;\r\n\t\t\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\t\t\tz.next_in_index = p;\r\n\t\t\t\t\tthat.write = q;\r\n\t\t\t\t\treturn that.inflate_flush(z, r);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthat.free = function(z) {\r\n\t\t\tthat.reset(z, null);\r\n\t\t\tthat.window = null;\r\n\t\t\thufts = null;\r\n\t\t\t// ZFREE(z, s);\r\n\t\t};\r\n\r\n\t\tthat.set_dictionary = function(d, start, n) {\r\n\t\t\tthat.window.set(d.subarray(start, start + n), 0);\r\n\t\t\tthat.read = that.write = n;\r\n\t\t};\r\n\r\n\t\t// Returns true if inflate is currently at the end of a block generated\r\n\t\t// by Z_SYNC_FLUSH or Z_FULL_FLUSH.\r\n\t\tthat.sync_point = function() {\r\n\t\t\treturn mode == LENS ? 1 : 0;\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t// Inflate\r\n\r\n\t// preset dictionary flag in zlib header\r\n\tvar PRESET_DICT = 0x20;\r\n\r\n\tvar Z_DEFLATED = 8;\r\n\r\n\tvar METHOD = 0; // waiting for method byte\r\n\tvar FLAG = 1; // waiting for flag byte\r\n\tvar DICT4 = 2; // four dictionary check bytes to go\r\n\tvar DICT3 = 3; // three dictionary check bytes to go\r\n\tvar DICT2 = 4; // two dictionary check bytes to go\r\n\tvar DICT1 = 5; // one dictionary check byte to go\r\n\tvar DICT0 = 6; // waiting for inflateSetDictionary\r\n\tvar BLOCKS = 7; // decompressing blocks\r\n\tvar DONE = 12; // finished check, done\r\n\tvar BAD = 13; // got an error--stay here\r\n\r\n\tvar mark = [ 0, 0, 0xff, 0xff ];\r\n\r\n\tfunction Inflate() {\r\n\t\tvar that = this;\r\n\r\n\t\tthat.mode = 0; // current inflate mode\r\n\r\n\t\t// mode dependent information\r\n\t\tthat.method = 0; // if FLAGS, method byte\r\n\r\n\t\t// if CHECK, check values to compare\r\n\t\tthat.was = [ 0 ]; // new Array(1); // computed check value\r\n\t\tthat.need = 0; // stream check value\r\n\r\n\t\t// if BAD, inflateSync's marker bytes count\r\n\t\tthat.marker = 0;\r\n\r\n\t\t// mode independent information\r\n\t\tthat.wbits = 0; // log2(window size) (8..15, defaults to 15)\r\n\r\n\t\t// this.blocks; // current inflate_blocks state\r\n\r\n\t\tfunction inflateReset(z) {\r\n\t\t\tif (!z || !z.istate)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\r\n\t\t\tz.total_in = z.total_out = 0;\r\n\t\t\tz.msg = null;\r\n\t\t\tz.istate.mode = BLOCKS;\r\n\t\t\tz.istate.blocks.reset(z, null);\r\n\t\t\treturn Z_OK;\r\n\t\t}\r\n\r\n\t\tthat.inflateEnd = function(z) {\r\n\t\t\tif (that.blocks)\r\n\t\t\t\tthat.blocks.free(z);\r\n\t\t\tthat.blocks = null;\r\n\t\t\t// ZFREE(z, z->state);\r\n\t\t\treturn Z_OK;\r\n\t\t};\r\n\r\n\t\tthat.inflateInit = function(z, w) {\r\n\t\t\tz.msg = null;\r\n\t\t\tthat.blocks = null;\r\n\r\n\t\t\t// set window size\r\n\t\t\tif (w < 8 || w > 15) {\r\n\t\t\t\tthat.inflateEnd(z);\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\t}\r\n\t\t\tthat.wbits = w;\r\n\r\n\t\t\tz.istate.blocks = new InfBlocks(z, 1 << w);\r\n\r\n\t\t\t// reset state\r\n\t\t\tinflateReset(z);\r\n\t\t\treturn Z_OK;\r\n\t\t};\r\n\r\n\t\tthat.inflate = function(z, f) {\r\n\t\t\tvar r;\r\n\t\t\tvar b;\r\n\r\n\t\t\tif (!z || !z.istate || !z.next_in)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\tf = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\r\n\t\t\tr = Z_BUF_ERROR;\r\n\t\t\twhile (true) {\r\n\t\t\t\t// System.out.println(\"mode: \"+z.istate.mode);\r\n\t\t\t\tswitch (z.istate.mode) {\r\n\t\t\t\tcase METHOD:\r\n\r\n\t\t\t\t\tif (z.avail_in === 0)\r\n\t\t\t\t\t\treturn r;\r\n\t\t\t\t\tr = f;\r\n\r\n\t\t\t\t\tz.avail_in--;\r\n\t\t\t\t\tz.total_in++;\r\n\t\t\t\t\tif (((z.istate.method = z.read_byte(z.next_in_index++)) & 0xf) != Z_DEFLATED) {\r\n\t\t\t\t\t\tz.istate.mode = BAD;\r\n\t\t\t\t\t\tz.msg = \"unknown compression method\";\r\n\t\t\t\t\t\tz.istate.marker = 5; // can't try inflateSync\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ((z.istate.method >> 4) + 8 > z.istate.wbits) {\r\n\t\t\t\t\t\tz.istate.mode = BAD;\r\n\t\t\t\t\t\tz.msg = \"invalid window size\";\r\n\t\t\t\t\t\tz.istate.marker = 5; // can't try inflateSync\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tz.istate.mode = FLAG;\r\n\t\t\t\t\t/* falls through */\r\n\t\t\t\tcase FLAG:\r\n\r\n\t\t\t\t\tif (z.avail_in === 0)\r\n\t\t\t\t\t\treturn r;\r\n\t\t\t\t\tr = f;\r\n\r\n\t\t\t\t\tz.avail_in--;\r\n\t\t\t\t\tz.total_in++;\r\n\t\t\t\t\tb = (z.read_byte(z.next_in_index++)) & 0xff;\r\n\r\n\t\t\t\t\tif ((((z.istate.method << 8) + b) % 31) !== 0) {\r\n\t\t\t\t\t\tz.istate.mode = BAD;\r\n\t\t\t\t\t\tz.msg = \"incorrect header check\";\r\n\t\t\t\t\t\tz.istate.marker = 5; // can't try inflateSync\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ((b & PRESET_DICT) === 0) {\r\n\t\t\t\t\t\tz.istate.mode = BLOCKS;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tz.istate.mode = DICT4;\r\n\t\t\t\t\t/* falls through */\r\n\t\t\t\tcase DICT4:\r\n\r\n\t\t\t\t\tif (z.avail_in === 0)\r\n\t\t\t\t\t\treturn r;\r\n\t\t\t\t\tr = f;\r\n\r\n\t\t\t\t\tz.avail_in--;\r\n\t\t\t\t\tz.total_in++;\r\n\t\t\t\t\tz.istate.need = ((z.read_byte(z.next_in_index++) & 0xff) << 24) & 0xff000000;\r\n\t\t\t\t\tz.istate.mode = DICT3;\r\n\t\t\t\t\t/* falls through */\r\n\t\t\t\tcase DICT3:\r\n\r\n\t\t\t\t\tif (z.avail_in === 0)\r\n\t\t\t\t\t\treturn r;\r\n\t\t\t\t\tr = f;\r\n\r\n\t\t\t\t\tz.avail_in--;\r\n\t\t\t\t\tz.total_in++;\r\n\t\t\t\t\tz.istate.need += ((z.read_byte(z.next_in_index++) & 0xff) << 16) & 0xff0000;\r\n\t\t\t\t\tz.istate.mode = DICT2;\r\n\t\t\t\t\t/* falls through */\r\n\t\t\t\tcase DICT2:\r\n\r\n\t\t\t\t\tif (z.avail_in === 0)\r\n\t\t\t\t\t\treturn r;\r\n\t\t\t\t\tr = f;\r\n\r\n\t\t\t\t\tz.avail_in--;\r\n\t\t\t\t\tz.total_in++;\r\n\t\t\t\t\tz.istate.need += ((z.read_byte(z.next_in_index++) & 0xff) << 8) & 0xff00;\r\n\t\t\t\t\tz.istate.mode = DICT1;\r\n\t\t\t\t\t/* falls through */\r\n\t\t\t\tcase DICT1:\r\n\r\n\t\t\t\t\tif (z.avail_in === 0)\r\n\t\t\t\t\t\treturn r;\r\n\t\t\t\t\tr = f;\r\n\r\n\t\t\t\t\tz.avail_in--;\r\n\t\t\t\t\tz.total_in++;\r\n\t\t\t\t\tz.istate.need += (z.read_byte(z.next_in_index++) & 0xff);\r\n\t\t\t\t\tz.istate.mode = DICT0;\r\n\t\t\t\t\treturn Z_NEED_DICT;\r\n\t\t\t\tcase DICT0:\r\n\t\t\t\t\tz.istate.mode = BAD;\r\n\t\t\t\t\tz.msg = \"need dictionary\";\r\n\t\t\t\t\tz.istate.marker = 0; // can try inflateSync\r\n\t\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\t\tcase BLOCKS:\r\n\r\n\t\t\t\t\tr = z.istate.blocks.proc(z, r);\r\n\t\t\t\t\tif (r == Z_DATA_ERROR) {\r\n\t\t\t\t\t\tz.istate.mode = BAD;\r\n\t\t\t\t\t\tz.istate.marker = 0; // can try inflateSync\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (r == Z_OK) {\r\n\t\t\t\t\t\tr = f;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (r != Z_STREAM_END) {\r\n\t\t\t\t\t\treturn r;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tr = f;\r\n\t\t\t\t\tz.istate.blocks.reset(z, z.istate.was);\r\n\t\t\t\t\tz.istate.mode = DONE;\r\n\t\t\t\t\t/* falls through */\r\n\t\t\t\tcase DONE:\r\n\t\t\t\t\treturn Z_STREAM_END;\r\n\t\t\t\tcase BAD:\r\n\t\t\t\t\treturn Z_DATA_ERROR;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthat.inflateSetDictionary = function(z, dictionary, dictLength) {\r\n\t\t\tvar index = 0;\r\n\t\t\tvar length = dictLength;\r\n\t\t\tif (!z || !z.istate || z.istate.mode != DICT0)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\r\n\t\t\tif (length >= (1 << z.istate.wbits)) {\r\n\t\t\t\tlength = (1 << z.istate.wbits) - 1;\r\n\t\t\t\tindex = dictLength - length;\r\n\t\t\t}\r\n\t\t\tz.istate.blocks.set_dictionary(dictionary, index, length);\r\n\t\t\tz.istate.mode = BLOCKS;\r\n\t\t\treturn Z_OK;\r\n\t\t};\r\n\r\n\t\tthat.inflateSync = function(z) {\r\n\t\t\tvar n; // number of bytes to look at\r\n\t\t\tvar p; // pointer to bytes\r\n\t\t\tvar m; // number of marker bytes found in a row\r\n\t\t\tvar r, w; // temporaries to save total_in and total_out\r\n\r\n\t\t\t// set up\r\n\t\t\tif (!z || !z.istate)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\tif (z.istate.mode != BAD) {\r\n\t\t\t\tz.istate.mode = BAD;\r\n\t\t\t\tz.istate.marker = 0;\r\n\t\t\t}\r\n\t\t\tif ((n = z.avail_in) === 0)\r\n\t\t\t\treturn Z_BUF_ERROR;\r\n\t\t\tp = z.next_in_index;\r\n\t\t\tm = z.istate.marker;\r\n\r\n\t\t\t// search\r\n\t\t\twhile (n !== 0 && m < 4) {\r\n\t\t\t\tif (z.read_byte(p) == mark[m]) {\r\n\t\t\t\t\tm++;\r\n\t\t\t\t} else if (z.read_byte(p) !== 0) {\r\n\t\t\t\t\tm = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tm = 4 - m;\r\n\t\t\t\t}\r\n\t\t\t\tp++;\r\n\t\t\t\tn--;\r\n\t\t\t}\r\n\r\n\t\t\t// restore\r\n\t\t\tz.total_in += p - z.next_in_index;\r\n\t\t\tz.next_in_index = p;\r\n\t\t\tz.avail_in = n;\r\n\t\t\tz.istate.marker = m;\r\n\r\n\t\t\t// return no joy or set up to restart on a new block\r\n\t\t\tif (m != 4) {\r\n\t\t\t\treturn Z_DATA_ERROR;\r\n\t\t\t}\r\n\t\t\tr = z.total_in;\r\n\t\t\tw = z.total_out;\r\n\t\t\tinflateReset(z);\r\n\t\t\tz.total_in = r;\r\n\t\t\tz.total_out = w;\r\n\t\t\tz.istate.mode = BLOCKS;\r\n\t\t\treturn Z_OK;\r\n\t\t};\r\n\r\n\t\t// Returns true if inflate is currently at the end of a block generated\r\n\t\t// by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\r\n\t\t// implementation to provide an additional safety check. PPP uses\r\n\t\t// Z_SYNC_FLUSH\r\n\t\t// but removes the length bytes of the resulting empty stored block. When\r\n\t\t// decompressing, PPP checks that at the end of input packet, inflate is\r\n\t\t// waiting for these length bytes.\r\n\t\tthat.inflateSyncPoint = function(z) {\r\n\t\t\tif (!z || !z.istate || !z.istate.blocks)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\treturn z.istate.blocks.sync_point();\r\n\t\t};\r\n\t}\r\n\r\n\t// ZStream\r\n\r\n\tfunction ZStream() {\r\n\t}\r\n\r\n\tZStream.prototype = {\r\n\t\tinflateInit : function(bits) {\r\n\t\t\tvar that = this;\r\n\t\t\tthat.istate = new Inflate();\r\n\t\t\tif (!bits)\r\n\t\t\t\tbits = MAX_BITS;\r\n\t\t\treturn that.istate.inflateInit(that, bits);\r\n\t\t},\r\n\r\n\t\tinflate : function(f) {\r\n\t\t\tvar that = this;\r\n\t\t\tif (!that.istate)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\treturn that.istate.inflate(that, f);\r\n\t\t},\r\n\r\n\t\tinflateEnd : function() {\r\n\t\t\tvar that = this;\r\n\t\t\tif (!that.istate)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\tvar ret = that.istate.inflateEnd(that);\r\n\t\t\tthat.istate = null;\r\n\t\t\treturn ret;\r\n\t\t},\r\n\r\n\t\tinflateSync : function() {\r\n\t\t\tvar that = this;\r\n\t\t\tif (!that.istate)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\treturn that.istate.inflateSync(that);\r\n\t\t},\r\n\t\tinflateSetDictionary : function(dictionary, dictLength) {\r\n\t\t\tvar that = this;\r\n\t\t\tif (!that.istate)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\treturn that.istate.inflateSetDictionary(that, dictionary, dictLength);\r\n\t\t},\r\n\t\tread_byte : function(start) {\r\n\t\t\tvar that = this;\r\n\t\t\treturn that.next_in.subarray(start, start + 1)[0];\r\n\t\t},\r\n\t\tread_buf : function(start, size) {\r\n\t\t\tvar that = this;\r\n\t\t\treturn that.next_in.subarray(start, start + size);\r\n\t\t}\r\n\t};\r\n\r\n\t// Inflater\r\n\r\n\tfunction Inflater() {\r\n\t\tvar that = this;\r\n\t\tvar z = new ZStream();\r\n\t\tvar bufsize = 512;\r\n\t\tvar flush = Z_NO_FLUSH;\r\n\t\tvar buf = new Uint8Array(bufsize);\r\n\t\tvar nomoreinput = false;\r\n\r\n\t\tz.inflateInit();\r\n\t\tz.next_out = buf;\r\n\r\n\t\tthat.append = function(data, onprogress) {\r\n\t\t\tvar err, buffers = [], lastIndex = 0, bufferIndex = 0, bufferSize = 0, array;\r\n\t\t\tif (data.length === 0)\r\n\t\t\t\treturn;\r\n\t\t\tz.next_in_index = 0;\r\n\t\t\tz.next_in = data;\r\n\t\t\tz.avail_in = data.length;\r\n\t\t\tdo {\r\n\t\t\t\tz.next_out_index = 0;\r\n\t\t\t\tz.avail_out = bufsize;\r\n\t\t\t\tif ((z.avail_in === 0) && (!nomoreinput)) { // if buffer is empty and more input is available, refill it\r\n\t\t\t\t\tz.next_in_index = 0;\r\n\t\t\t\t\tnomoreinput = true;\r\n\t\t\t\t}\r\n\t\t\t\terr = z.inflate(flush);\r\n\t\t\t\tif (nomoreinput && (err === Z_BUF_ERROR)) {\r\n\t\t\t\t\tif (z.avail_in !== 0)\r\n\t\t\t\t\t\tthrow new Error(\"inflating: bad input\");\r\n\t\t\t\t} else if (err !== Z_OK && err !== Z_STREAM_END)\r\n\t\t\t\t\tthrow new Error(\"inflating: \" + z.msg);\r\n\t\t\t\tif ((nomoreinput || err === Z_STREAM_END) && (z.avail_in === data.length))\r\n\t\t\t\t\tthrow new Error(\"inflating: bad input\");\r\n\t\t\t\tif (z.next_out_index)\r\n\t\t\t\t\tif (z.next_out_index === bufsize)\r\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf));\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\r\n\t\t\t\tbufferSize += z.next_out_index;\r\n\t\t\t\tif (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\r\n\t\t\t\t\tonprogress(z.next_in_index);\r\n\t\t\t\t\tlastIndex = z.next_in_index;\r\n\t\t\t\t}\r\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\r\n\t\t\tarray = new Uint8Array(bufferSize);\r\n\t\t\tbuffers.forEach(function(chunk) {\r\n\t\t\t\tarray.set(chunk, bufferIndex);\r\n\t\t\t\tbufferIndex += chunk.length;\r\n\t\t\t});\r\n\t\t\treturn array;\r\n\t\t};\r\n\t\tthat.flush = function() {\r\n\t\t\tz.inflateEnd();\r\n\t\t};\r\n\t}\r\n\r\n\t// 'zip' may not be defined in z-worker and some tests\r\n\tvar env = global.zip || global;\r\n\tenv.Inflater = env._jzlib_Inflater = Inflater;\r\n})(this);\r\n\ndefine(\"inflate\", (function (global) {\n    return function () {\n        var ret, fn;\n        return ret || global.zip;\n    };\n}(this)));\n\n",
    "// inflate is required by zip,\r\n// but inflate must be loaded *after* zip\r\ndefine('readium_js_viewer/storage/ZipFileLoader',['zip', '../workers/Messages', 'inflate'], function(zip, Messages){\r\n\r\n\tvar largeFileThreshold = 150 * 1024 * 1024; // 150MB\r\n\r\n\tzip.useWebWorkers = false;\r\n\r\n\tZipFileLoader = function(options){\r\n\t\tthis.options = options;\r\n\t\t\t//this.client = new RemoteStorage.BaseClient(remoteStorage, '/readium/');\r\n\t}\r\n\r\n\tZipFileLoader.prototype = {\r\n\t\tinit : function(success) {\r\n\t\t\tif (this.entries){\r\n\t\t\t\tsuccess();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar buf = this.options.buf;\r\n\r\n\t\t\tthis.entries = {};\r\n\t\t\tself = this;\r\n\r\n\t\t\tzip.createReader(new zip.BlobReader(buf), function(reader){\r\n\t\t\t\treader.getEntries(function(entries){\r\n\t\t\t\t\tfor (var i = 0; i < entries.length; i++){\r\n\t\t\t\t\t\tif (!entries[i].directory){\r\n\t\t\t\t\t\t\tself.entries[entries[i].filename] = entries[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsuccess();\r\n\t\t\t\t});\r\n\t\t\t}, this.options.error);\r\n\t\t},\r\n\t\tisZipFile : function() {\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\tgetZipBlob : function() {\r\n\t\t\treturn this.options.buf;\r\n\t\t},\r\n\t\tloadFile : function(path, callback){\r\n\t\t\tif (!this.entries){\r\n\t\t\t\tthrow \"you need to call ZipFileLoader.init first\";\r\n\t\t\t}\r\n\r\n\t\t\tvar entry = this.entries[path];\r\n\t\t\tif (entry) {\r\n\t\t\t\tentry.getData(new zip.BlobWriter(), callback);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcallback(null);\r\n\t\t\t}\r\n\t\t},\r\n\t\tloadAllFiles : function(excludeList, startAtIndex, progress){\r\n\t\t\tif (!this.entries){\r\n\t\t\t\tthrow \"you need to call ZipFileLoader.init first\";\r\n\t\t\t}\r\n\t\t\tvar entries = this.entries;\r\n\t\t\tfor (var i = 0; i < excludeList.length; i++) {\r\n\t\t\t\tdelete entries[excludeList[i]];\r\n\t\t\t}\r\n\t\t\tvar pending = [];\r\n\t\t\tvar continueCallback = function() {\r\n\t\t\t\tif (pending.length){\r\n\t\t\t\t\tsetTimeout(inflateAndProcess.bind(null, pending.shift()), 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar inflateAndProcess = function(entry) {\r\n\t\t\t\tentry.getData(new zip.BlobWriter(), progress.bind(null, continueCallback, entry.filename));\r\n\t\t\t}\r\n\r\n\t\t\tvar buf = this.options.buf,\r\n\t\t\t    count = 0;\r\n\r\n\t\t\t// for large files we want to extract only one file at a time\r\n\t\t    var concurrent = buf.size > largeFileThreshold ? 1 : 200;\r\n\r\n\t\t\tfor (var fn in entries) {\r\n\t\t\t\tvar entry = entries[fn];\r\n\t\t\t\tif (count++ < startAtIndex){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse if (count <= (startAtIndex + concurrent))\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log('starting: ' + entry.filename);\r\n\t\t\t\t\tinflateAndProcess(entry);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tpending.push(entry);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn count;\r\n\t\t},\r\n\r\n\t}\r\n\treturn ZipFileLoader;\r\n})\r\n;\n",
    "define('readium_js_viewer/storage/UnpackedDirLoader',[],function(){\r\n\r\n\tvar UnpackedDirLoader = function(files) {\r\n\t\tthis.files = files;\r\n\t}\r\n\r\n\tUnpackedDirLoader.prototype = {\r\n\t\tisZipFile : function() {\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tloadFile : function(path, callback) {\r\n\t\t\tcallback(this.files[path]);\r\n\t\t},\r\n\t\tloadAllFiles : function(excludeList, startAtIndex, progress){\r\n\t\t\tfor (var i = 0; i < excludeList.length; i++) {\r\n\t\t\t\tdelete this.files[excludeList[i]];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar count = 0;\r\n\t\t\tfor (var fn in this.files) {\r\n\t\t\t\tif (count++ < startAtIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tsetTimeout(progress.bind(null, null, fn, this.files[fn]), 0);\r\n\t\t\t}\r\n\t\t\treturn count;\r\n\t\t}\r\n\t}\r\n\treturn UnpackedDirLoader;\r\n});\n",
    "define('readium_js_viewer/ModuleConfig',['module'], function(module) {\r\n\r\n\t\tvar config = module.config();\r\n\t\treturn {\r\n\t\t\t'imagePathPrefix': config.imagePathPrefix || \"\",\r\n\t\t\t\r\n\t\t\t'epubLibraryPath': config.epubLibraryPath || \"\",\r\n\r\n\t\t\t'canHandleUrl': config.canHandleUrl || false,\r\n\t\t\t'canHandleDirectory': config.canHandleDirectory || false,\r\n\r\n\r\n\t\t\t'epubReadingSystemUrl': config.epubReadingSystemUrl || \"/EPUBREADINGSYSTEM.js\",\r\n\r\n\t\t\t'workerUrl': config.workerUrl || \"/READIUMWORKER.js\",\r\n\r\n\t\t\t'annotationCSSUrl': config.annotationCSSUrl || \"/ANNOTATIONS.css\",\r\n\t\t\t'mathJaxUrl': config.mathJaxUrl || \"/MATHJAX.js\",\r\n\t\t\t'jsLibRoot': config.jsLibRoot || \"/ZIPJS/\",\r\n\r\n\t\t\t'useSimpleLoader': config.useSimpleLoader || false\r\n\r\n\t\t};\r\n});\r\n\n",
    ";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine('cryptoJs/core',[], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\t        function F() {}\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                F.prototype = this;\n\t                var subtype = new F();\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init')) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var i = 0; i < thatSigBytes; i += 4) {\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            var r = (function (m_w) {\n\t                var m_w = m_w;\n\t                var m_z = 0x3ade68b1;\n\t                var mask = 0xffffffff;\n\n\t                return function () {\n\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t                    var result = ((m_z << 0x10) + m_w) & mask;\n\t                    result /= 0x100000000;\n\t                    result += 0.5;\n\t                    return result * (Math.random() > .5 ? 1 : -1);\n\t                }\n\t            });\n\n\t            for (var i = 0, rcache; i < nBytes; i += 4) {\n\t                var _r = r((rcache || Math.random()) * 0x100000000);\n\n\t                rcache = _r() * 0x3ade67b7;\n\t                words.push((_r() * 0x100000000) | 0);\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                var processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));\ndefine('cryptoJs', ['cryptoJs/core'], function (main) { return main; });\n\n",
    ";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine('cryptoJs/sha1',[\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-1 hash algorithm.\n\t     */\n\t    var SHA1 = C_algo.SHA1 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476,\n\t                0xc3d2e1f0\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\n\t            // Computation\n\t            for (var i = 0; i < 80; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n\t                    W[i] = (n << 1) | (n >>> 31);\n\t                }\n\n\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n\t                if (i < 20) {\n\t                    t += ((b & c) | (~b & d)) + 0x5a827999;\n\t                } else if (i < 40) {\n\t                    t += (b ^ c ^ d) + 0x6ed9eba1;\n\t                } else if (i < 60) {\n\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n\t                } else /* if (i < 80) */ {\n\t                    t += (b ^ c ^ d) - 0x359d3e2a;\n\t                }\n\n\t                e = d;\n\t                d = c;\n\t                c = (b << 30) | (b >>> 2);\n\t                b = a;\n\t                a = t;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA1('message');\n\t     *     var hash = CryptoJS.SHA1(wordArray);\n\t     */\n\t    C.SHA1 = Hasher._createHelper(SHA1);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA1(message, key);\n\t     */\n\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n\t}());\n\n\n\treturn CryptoJS.SHA1;\n\n}));\n",
    "//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.\r\n//  \r\n//  Redistribution and use in source and binary forms, with or without modification, \r\n//  are permitted provided that the following conditions are met:\r\n//  1. Redistributions of source code must retain the above copyright notice, this \r\n//  list of conditions and the following disclaimer.\r\n//  2. Redistributions in binary form must reproduce the above copyright notice, \r\n//  this list of conditions and the following disclaimer in the documentation and/or \r\n//  other materials provided with the distribution.\r\n//  3. Neither the name of the organization nor the names of its contributors may be \r\n//  used to endorse or promote products derived from this software without specific \r\n//  prior written permission.\r\n\r\ndefine('readium_js/epub-fetch/encryption_handler',['cryptoJs/sha1'], function (SHA1) {\r\n\r\n    var EncryptionHandler = function (encryptionData) {\r\n        var self = this;\r\n\r\n        var ENCRYPTION_METHODS = {\r\n            'http://www.idpf.org/2008/embedding': embeddedFontDeobfuscateIdpf,\r\n            'http://ns.adobe.com/pdf/enc#RC': embeddedFontDeobfuscateAdobe\r\n        };\r\n\r\n        // INTERNAL FUNCTIONS\r\n\r\n        function blob2BinArray(blob, callback) {\r\n            var fileReader = new FileReader();\r\n            fileReader.onload = function () {\r\n                var arrayBuffer = this.result;\r\n                callback(new Uint8Array(arrayBuffer));\r\n            };\r\n            fileReader.readAsArrayBuffer(blob);\r\n        }\r\n\r\n        function xorObfuscatedBlob(obfuscatedResourceBlob, prefixLength, xorKey, callback) {\r\n            var obfuscatedPrefixBlob = obfuscatedResourceBlob.slice(0, prefixLength);\r\n            blob2BinArray(obfuscatedPrefixBlob, function (bytes) {\r\n                var masklen = xorKey.length;\r\n                for (var i = 0; i < prefixLength; i++) {\r\n                    bytes[i] = bytes[i] ^ (xorKey[i % masklen]);\r\n                }\r\n                var deobfuscatedPrefixBlob = new Blob([bytes], { type: obfuscatedResourceBlob.type });\r\n                var remainderBlob = obfuscatedResourceBlob.slice(prefixLength);\r\n                var deobfuscatedBlob = new Blob([deobfuscatedPrefixBlob, remainderBlob],\r\n                    { type: obfuscatedResourceBlob.type });\r\n\r\n                callback(deobfuscatedBlob);\r\n            });\r\n        }\r\n\r\n        function embeddedFontDeobfuscateIdpf(obfuscatedResourceBlob, callback) {\r\n\r\n            var prefixLength = 1040;\r\n            // Shamelessly copied from\r\n            // https://github.com/readium/readium-chrome-extension/blob/26d4b0cafd254cfa93bf7f6225887b83052642e0/scripts/models/path_resolver.js#L102 :\r\n            xorObfuscatedBlob(obfuscatedResourceBlob, prefixLength, encryptionData.uidHash, callback);\r\n        }\r\n\r\n        function urnUuidToByteArray(id) {\r\n            var uuidRegexp = /(urn:uuid:)?([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{12})/i;\r\n            var matchResults = uuidRegexp.exec(id);\r\n            var rawUuid = matchResults[2] + matchResults[3] + matchResults[4] + matchResults[5] + matchResults[6];\r\n            if (!rawUuid || rawUuid.length != 32) {\r\n                console.error('Bad UUID format for ID :' + id);\r\n            }\r\n            var byteArray = [];\r\n            for (var i = 0; i < 16; i++) {\r\n                var byteHex = rawUuid.substr(i * 2, 2);\r\n                var byteNumber = parseInt(byteHex, 16);\r\n                byteArray.push(byteNumber);\r\n            }\r\n            return byteArray;\r\n        }\r\n\r\n        function embeddedFontDeobfuscateAdobe(obfuscatedResourceBlob, callback) {\r\n\r\n            // extract the UUID and convert to big-endian binary form (16 bytes):\r\n            var uidWordArray = urnUuidToByteArray(encryptionData.uid);\r\n            var prefixLength = 1024;\r\n            xorObfuscatedBlob(obfuscatedResourceBlob, prefixLength, uidWordArray, callback)\r\n        }\r\n\r\n\r\n        // PUBLIC API\r\n\r\n        this.isEncryptionSpecified = function () {\r\n            return encryptionData && encryptionData.encryptions;\r\n        };\r\n\r\n\r\n        this.getEncryptionMethodForRelativePath = function (pathRelativeToRoot) {\r\n            if (self.isEncryptionSpecified()) {\r\n                return encryptionData.encryptions[pathRelativeToRoot];\r\n            } else {\r\n                return undefined;\r\n            }\r\n        };\r\n\r\n        this.getDecryptionFunctionForRelativePath = function (pathRelativeToRoot) {\r\n            var encryptionMethod = self.getEncryptionMethodForRelativePath(pathRelativeToRoot);\r\n            if (encryptionMethod && ENCRYPTION_METHODS[encryptionMethod]) {\r\n                return ENCRYPTION_METHODS[encryptionMethod];\r\n            } else {\r\n                return undefined;\r\n            }\r\n        };\r\n\r\n    };\r\n\r\n    EncryptionHandler.CreateEncryptionData =  function(id, encryptionDom) {\r\n\r\n        var encryptionData = {\r\n            uid: id,\r\n            uidHash: SHA1(unescape(encodeURIComponent(id.trim())), { asBytes: true }),\r\n            encryptions: undefined\r\n        };\r\n\r\n        var encryptedData = $('EncryptedData', encryptionDom);\r\n        encryptedData.each(function (index, encryptedData) {\r\n            var encryptionAlgorithm = $('EncryptionMethod', encryptedData).first().attr('Algorithm');\r\n\r\n            // For some reason, jQuery selector \"\" against XML DOM sometimes doesn't match properly\r\n            var cipherReference = $('CipherReference', encryptedData);\r\n            cipherReference.each(function (index, CipherReference) {\r\n                var cipherReferenceURI = $(CipherReference).attr('URI');\r\n                console.log('Encryption/obfuscation algorithm ' + encryptionAlgorithm + ' specified for ' +\r\n                    cipherReferenceURI);\r\n\r\n                if(!encryptionData.encryptions) {\r\n                    encryptionData.encryptions = {};\r\n                }\r\n\r\n                encryptionData.encryptions[cipherReferenceURI] = encryptionAlgorithm;\r\n            });\r\n        });\r\n\r\n        return encryptionData;\r\n    };\r\n\r\n    return EncryptionHandler;\r\n});\n",
    "//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.\r\n//\r\n//  Redistribution and use in source and binary forms, with or without modification,\r\n//  are permitted provided that the following conditions are met:\r\n//  1. Redistributions of source code must retain the above copyright notice, this\r\n//  list of conditions and the following disclaimer.\r\n//  2. Redistributions in binary form must reproduce the above copyright notice,\r\n//  this list of conditions and the following disclaimer in the documentation and/or\r\n//  other materials provided with the distribution.\r\n//  3. Neither the name of the organization nor the names of its contributors may be\r\n//  used to endorse or promote products derived from this software without specific\r\n//  prior written permission.\r\n\r\ndefine('readium_js_viewer/workers/ContentTransformer',['../ModuleConfig', 'readium_js/epub-fetch/encryption_handler'], function(moduleConfig, EncryptionHandler){\r\n\r\n\tvar isXhtmlFile = function(name){\r\n\t\treturn name.lastIndexOf('.xhtml') == name.length - ('.xhtml'.length) || name.lastIndexOf('.html') == name.length - ('.html'.length);\r\n\t}\r\n\r\n\tvar ContentTransformer = function(encryptionData){\r\n\t\tthis.encryptionHandler = new EncryptionHandler(encryptionData);\r\n\t}\r\n\r\n\tContentTransformer.prototype = {\r\n\t\ttransformContent : function(name, data, callback){\r\n\r\n            var decryptionFunction = this.encryptionHandler.getDecryptionFunctionForRelativePath(name);\r\n\t\t\tif (decryptionFunction){\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tdecryptionFunction(data, callback);\r\n\t\t\t\t}\r\n\t\t\t\tcatch(e)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.error(e);\r\n\t\t\t\t\tcallback(data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (isXhtmlFile(name)){\r\n\t\t\t\tvar fileReader = new FileReader(),\r\n\t\t\t\t\tself = this;\r\n\r\n\t\t\t\tfileReader.onload = function(){\r\n\t\t\t\t\tvar newContent = self._transformXhtml(this.result);\r\n\t\t\t\t\tcallback(new Blob([newContent]));\r\n\t\t\t\t}\r\n\t\t\t\tfileReader.readAsText(data);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tcallback(data);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_transformXhtml : function(contentDocumentHtml){\r\n\r\n\t\t\tvar mathJaxUrl = moduleConfig.mathJaxUrl,\r\n\t\t\t\tersUrl = moduleConfig.epubReadingSystemUrl;\r\n\r\n\t\t\tvar scripts = \"\";\r\n\r\n\t\t\tif (ersUrl){\r\n            \tscripts += \"<script type=\\\"text/javascript\\\" src=\\\"\" + ersUrl + \"\\\"><\\/script>\";\r\n            }\r\n\r\n            if (mathJaxUrl && contentDocumentHtml.indexOf(\"<math\") >= 0) {\r\n                scripts += \"<script type=\\\"text/javascript\\\" src=\\\"\" + mathJaxUrl + \"\\\"><\\/script>\";\r\n            }\r\n\r\n            var mangledContent = scripts ? contentDocumentHtml.replace(/(<head.*?>)/, \"$1\" + scripts) : contentDocumentHtml;\r\n            return mangledContent;\r\n\t\t}\r\n\t}\r\n\r\n\treturn ContentTransformer;\r\n});\r\n\n",
    "define('readium_js_viewer/workers/EpubLibraryWriter',['StorageManager', '../storage/ZipFileLoader', '../storage/UnpackedDirLoader', './Messages', './ContentTransformer'], function(StorageManager, ZipFileLoader, UnpackedDirLoader, Messages, ContentTransformer){\r\n\r\n\tvar LibraryWriter = function(){\r\n\r\n\t}\r\n\r\n\tLibraryWriter.prototype = {\r\n        _getFullUrl : function(packageUrl, relativeUrl){\r\n            if (!relativeUrl){\r\n                return null;\r\n            }\r\n\r\n            var parts = packageUrl.split('/');\r\n            parts.pop();\r\n\r\n            var root = parts.join('/');\r\n\r\n            return root + (relativeUrl.charAt(0) == '/' ? '' : '/') + relativeUrl\r\n        },\r\n\r\n        _saveLibraryIndex : function(success, error){\r\n            var blob = new Blob([JSON.stringify(this.libraryData)]);\r\n            StorageManager.saveFile('/epub_library.json', blob, success, error);\r\n        },\r\n        _saveEpubToIndex : function(options, epubObj){\r\n            this.libraryData.push(epubObj);\r\n            this._saveLibraryIndex(function(){\r\n                options.success(epubObj);\r\n            }, options.error);\r\n        },\r\n\r\n        _addEpub : function(options, packageObj, packagePath, encryptionData){\r\n            // create a random root folder name\r\n            var rootDirName = this.rootDirName || (new Date().getTime() + '' + Math.floor(Math.random() * 1000)),\r\n                self = this,\r\n                fileLoader = this.fileLoader;\r\n\r\n            var errorHandler = function(msg, err) {\r\n                if (err.original.code == 7)\r\n                {\r\n                    // This is an InvalidStateError. It indicates that we ran out of memory.\r\n                    // Chrome has 500MB limit on the blobs you can create. It's also\r\n                    // possible that this indicates an actual invalid state. If you made\r\n                    // changes to the code and are getting this error all the time then\r\n                    // it's possible you screwed something up.\r\n                    if (self.callbacks.continueImport && fileLoader.isZipFile()) {\r\n                        self.callbacks.continueImport(fileLoader.getZipBlob(), count, rootDirName);\r\n                        return;\r\n                    }\r\n                }\r\n                options.error(msg, err);\r\n            }\r\n\r\n            var commitEpubToLibrary = function(){\r\n\r\n                var epubObj = {\r\n                    id: packageObj.id,\r\n                    rootDir : rootDirName,\r\n                    packagePath : packagePath,\r\n                    title: packageObj.title,\r\n                    author: packageObj.author,\r\n                    rootUrl : StorageManager.getPathUrl(rootDirName)\r\n                }\r\n                if (packageObj.coverHref){\r\n                    epubObj.coverPath = packageObj.coverHref;\r\n                    epubObj.coverHref = StorageManager.getPathUrl(rootDirName + '/' + self._getFullUrl(packagePath, packageObj.coverHref));\r\n                }\r\n                self._saveEpubToIndex(options, epubObj);\r\n            };\r\n\r\n            var contentTransformer = new ContentTransformer(encryptionData);\r\n\r\n            var startAtIndex = this.startAtIndex || 0;\r\n            var count = startAtIndex;\r\n            var max = fileLoader.loadAllFiles(['META-INF/encryption.xml'], startAtIndex, function(continueCallback, name, file){\r\n                var callback = function(name, transformedContent){\r\n                    var path = rootDirName + '/' + name;\r\n                    StorageManager.saveFile(path, transformedContent, function(){\r\n                        options.progress(Math.round(100 * (++count/max)), Messages.PROGRESS_WRITING, count + \" of \" + max + ' (' + name + ')');\r\n                        if (continueCallback) continueCallback();\r\n                        if (count == max) commitEpubToLibrary();\r\n                    }, errorHandler);\r\n                }\r\n\r\n                contentTransformer.transformContent(name, file, callback.bind(null, name));\r\n            });\r\n\r\n        },\r\n\r\n        _replaceEpub : function(toReplace, packageObj, packagePath){\r\n\r\n            var self = this;\r\n\r\n            var deleteThenCallback = function(newItem){\r\n                self.deleteEpub(toReplace, function(){\r\n                    self.callbacks.success(newItem);\r\n                }, self.callbacks.error);\r\n            }\r\n\r\n            var wrappedOptions = {\r\n                success: deleteThenCallback,\r\n                error: this.callbacks.error,\r\n                progress: this.callbacks.progress\r\n            }\r\n\r\n            this._addEpub(wrappedOptions, packageObj, packagePath);\r\n        },\r\n        _checkForConflict : function(packageObj, packagePath, encryptionData){\r\n            for (var i = 0; i < this.libraryData.length; i++){\r\n                if (this.libraryData[i].id === packageObj.id){\r\n                    //duplicate found, prompt for confirmation\r\n                    var callback = this._replaceEpub.bind(this, this.libraryData[i], packageObj, packagePath);\r\n                    var sidebyside = this._addEpub.bind(this, this.callbacks, packageObj, packagePath);\r\n                    this.callbacks.overwrite(this.libraryData[i], callback, sidebyside);\r\n                    return;\r\n                }\r\n            }\r\n            this._addEpub(this.callbacks, packageObj, packagePath, encryptionData);\r\n        },\r\n        _deleteEpubWithIndex : function(i, success, error){\r\n            var libraryItem = this.libraryData[i];\r\n            this.libraryData.splice(i, 1);\r\n            this._saveLibraryIndex(function(){\r\n                StorageManager.deleteFile(libraryItem.rootDir, success, error);\r\n            }, error);\r\n        },\r\n        _loadFileAsString : function(path, callback, fileIsOptional){\r\n            var error = this.callbacks.error,\r\n                fileReader = new FileReader();\r\n\r\n            this.fileLoader.loadFile(path, function(blob){\r\n                if (blob){\r\n                    fileReader.onload = function() {\r\n                        // var xmlDom = (new DOMParser()).parseFromString(this.result, \"text/xml\");\r\n                        callback(this.result);\r\n                    };\r\n\r\n                    fileReader.readAsText(blob);\r\n                }\r\n                else {\r\n\r\n                    if(fileIsOptional) {\r\n                        callback(undefined);\r\n                    }\r\n                    else {\r\n                        this.callbacks.error(Messages.ERROR_EPUB);\r\n                        console.error('Epub archive or directory missing a required  file: ' + path);\r\n                    }\r\n                }\r\n            });\r\n\r\n        },\r\n        _findPackagePath : function(containerStr, callback){\r\n            findPackageResponse = function(data){\r\n                findPackageResponse = null;\r\n                callback(data.path);\r\n            }\r\n            postMessage({msg: Messages.FIND_PACKAGE, containerStr: containerStr});\r\n        },\r\n        _parsePackageData : function(packageStr, encryptionStr, callback){\r\n            parsePackageResponse = function(data){\r\n                parsePackageResponse = null;\r\n                callback(data.packageObj, data.encryptionData);\r\n            }\r\n            postMessage({msg: Messages.PARSE_PACKAGE, packageStr: packageStr, encryptionStr: encryptionStr});\r\n        },\r\n        _addEpubToLibrary : function(fileLoader){\r\n\r\n            this.fileLoader = fileLoader;\r\n            var self = this;\r\n\r\n            this._loadFileAsString('META-INF/container.xml', function(containerStr){\r\n                self._findPackagePath(containerStr, function(packagePath){\r\n                    self._loadFileAsString(packagePath, function(packageStr){\r\n                        self._loadFileAsString('META-INF/encryption.xml', function(encryptionStr){\r\n                            self._parsePackageData(packageStr, encryptionStr, function(packageObj, encryptionData){\r\n                                self._checkForConflict(packageObj, packagePath, encryptionData);\r\n                            });\r\n                        }, true);\r\n                    });\r\n                });\r\n\r\n                // var $rootfile = $('rootfile', containerDom);\r\n                // if (!$rootfile.length){\r\n                //     this.options.error(Messages.ERROR_EPUB);\r\n                //     console.error('Epub container.xml missing rootfile element');\r\n                // }\r\n\r\n\r\n            });\r\n            //self.client.storeFile(self._getMimeType(entry.filename),  '/' + entry.filename, this.result);\r\n        },\r\n        deleteEpubWithId : function(id, success, error){\r\n            for (var i = 0; i < this.libraryData.length && this.libraryData[i].rootDir != id; i++);\r\n\r\n            if (i < this.libraryData.length){\r\n                this._deleteEpubWithIndex(i, success, error);\r\n            }\r\n            else{\r\n                success();\r\n            }\r\n        },\r\n        // necessary to have this in addition to delete by id because at some point during an overwrite there will be two\r\n        // epubs in the index with the same id.\r\n        deleteEpub : function(libraryItem, success, error){\r\n            for (var i = 0; i < this.libraryData.length && this.libraryData[i] != libraryItem; i++);\r\n\r\n            if (i < this.libraryData.length){\r\n                this._deleteEpubWithIndex(i, success, error);\r\n            }\r\n            else{\r\n                success();\r\n            }\r\n        },\r\n        importZip : function(blob, callbacks){\r\n            this.callbacks = callbacks;\r\n            var fileLoader = new ZipFileLoader({\r\n                buf: blob,\r\n                error: callbacks.error\r\n            });\r\n\r\n        \tfileLoader.init(this._addEpubToLibrary.bind(this, fileLoader));\r\n\r\n        },\r\n        continueImportZip : function(blob, index, rootDirName, callbacks) {\r\n            this.callbacks = callbacks;\r\n            this.startAtIndex = index;\r\n            this.rootDirName = rootDirName;\r\n\r\n            var fileLoader = new ZipFileLoader({\r\n                buf: blob,\r\n                error: callbacks.error\r\n            });\r\n            this._addEpubToLibrary(fileLoader);\r\n        },\r\n        importFileList : function(files, callbacks){\r\n            this.callbacks = callbacks;\r\n            // var files = {};\r\n            // for (var i = 0; i < rawFiles.length; i++){\r\n            //     var path = rawFiles[i].webkitRelativePath,\r\n            //         shiftPath = path.split('/').shift().join('/');\r\n\r\n            //     files[shiftPath] = rawFiles[i];\r\n            // }\r\n            this._addEpubToLibrary(new UnpackedDirLoader(files));\r\n        },\r\n        importUrl : function(url, callbacks){\r\n            // I don't want jquery in the worker so go old school\r\n            var xhr = new XMLHttpRequest();\r\n                self = this,\r\n                error = function(){callbacks.error(Messages.ERROR_AJAX);};\r\n\r\n            xhr.open('GET', url, true);\r\n            xhr.responseType = 'blob';\r\n\r\n            xhr.onload = function(e) {\r\n              if (this.status == 200) {\r\n                // Note: .response instead of .responseText\r\n                var blob = new Blob([this.response], {type: 'application/epub'});\r\n                self.importZip(blob, callbacks);\r\n              }\r\n              else{\r\n                error();\r\n              }\r\n            };\r\n            xhr.onerror = error;\r\n\r\n            xhr.send();\r\n        }\r\n\t}\r\n\r\n\tvar writer = new LibraryWriter(),\r\n        overwriteContinue, overwriteSideBySide, findPackageResponse, parsePackageResponse;\r\n\r\n\t   onmessage = function(evt){\r\n\t\t\tvar data = evt.data,\r\n\t\t\t\tmsg = data.msg;\r\n\r\n\t\t\tvar success = function(){\r\n\t\t\t\tpostMessage({msg: Messages.SUCCESS, library: writer.libraryData});\r\n\t\t\t}\r\n\t\t\tvar progress = function(percent, type, data){\r\n\t\t\t\tpostMessage({msg: Messages.PROGRESS, percent: percent, progressType: type, progressData: data});\r\n\t\t\t}\r\n\t\t\tvar error = function(errorCode, data){\r\n\t\t\t\tpostMessage({msg: Messages.ERROR, errorMsg: errorCode, errorData: data});\r\n\t\t\t}\r\n            var continueImport = function(buf, index, rootDirName) {\r\n                postMessage({msg: Messages.CONTINUE_IMPORT_ZIP, buf: buf, index: index, rootDirName: rootDirName, libraryItems: writer.libraryData});\r\n            }\r\n\t\t\tvar overwrite = function(item, kontinue, sidebyside){\r\n\t\t\t\tpostMessage({msg: Messages.OVERWRITE, item: item});\r\n                overwriteContinue = function(){\r\n                    overwriteContinue = null;\r\n                    overwriteSideBySide = null;\r\n                    kontinue();\r\n                }\r\n                overwriteSideBySide = function(){\r\n                    overwriteContinue = null;\r\n                    overwriteSideBySide = null;\r\n                    sidebyside();\r\n                }\r\n\t\t\t}\r\n\r\n            switch(msg){\r\n    \t\t\tcase Messages.IMPORT_ZIP :\r\n                    writer.libraryData = data.libraryItems;\r\n    \t\t\t\tvar buf = data.buf;\r\n                    StorageManager.initStorage(function(){\r\n    \t\t\t\t    writer.importZip(buf, {success: success, progress: progress, error: error, overwrite: overwrite, continueImport: continueImport});\r\n                    }, error);\r\n    \t\t\t    break;\r\n                case Messages.CONTINUE_IMPORT_ZIP :\r\n                    writer.libraryData = data.libraryItems;\r\n                    var buf = data.buf,\r\n                        index = data.index,\r\n                        rootDirName = data.rootDirName;\r\n                    StorageManager.initStorage(function(){\r\n                        writer.continueImportZip(buf, index, rootDirName, {success: success, progress: progress, error: error, overwrite: overwrite, continueImport: continueImport});\r\n                    }, error);\r\n                    break;\r\n                case Messages.DELETE_EPUB:\r\n                    writer.libraryData = data.libraryItems;\r\n                    var id = data.id;\r\n                    StorageManager.initStorage(function(){\r\n                        writer.deleteEpubWithId(id, success, error);\r\n                    }, error);\r\n                    break;\r\n                case Messages.IMPORT_DIR:\r\n                    writer.libraryData = data.libraryItems;\r\n                    var files = data.files;\r\n                    StorageManager.initStorage(function(){\r\n                        writer.importFileList(files, {success: success, progress: progress, error: error, overwrite: overwrite});\r\n                    }, error);\r\n                    break;\r\n                case Messages.IMPORT_URL:\r\n                    writer.libraryData = data.libraryItems;\r\n                    var url = data.url;\r\n                    StorageManager.initStorage(function(){\r\n                        writer.importUrl(url, {success: success, progress: progress, error: error, overwrite: overwrite});\r\n                    }, error);\r\n                    break;\r\n                case Messages.MIGRATE :\r\n                    StorageManager.initStorage(function(){\r\n                        var wrapProgress = function(percent, data){\r\n                            progress(percent, Messages.PROGRESS_MIGRATING, data);\r\n                        }\r\n                        StorageManager.migrateLegacyBooks(success, error, wrapProgress);\r\n                    }, error);\r\n                case Messages.OVERWRITE_CONTINUE :\r\n                    overwriteContinue && overwriteContinue(data);\r\n                    break;\r\n                case Messages.OVERWRITE_SIDE_BY_SIDE:\r\n                    overwriteSideBySide && overwriteSideBySide(data);\r\n                    break;\r\n                case Messages.FIND_PACKAGE_RESPONSE :\r\n                    findPackageResponse && findPackageResponse(data);\r\n                    break;\r\n                case Messages.PARSE_PACKAGE_RESPONSE :\r\n                    parsePackageResponse && parsePackageResponse(data);\r\n                    break;\r\n            }\r\n\r\n\t\t};\r\n\r\n\t\treturn {};\r\n\r\n});\r\n\r\nrequire(\"readium_js_viewer/workers/EpubLibraryWriter\");\r\n\n"
  ]
}